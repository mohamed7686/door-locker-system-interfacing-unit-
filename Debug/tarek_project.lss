
tarek_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000283a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b2  00800060  0000283a  000028ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800112  00800112  00002980  2**0
                  ALLOC
  3 .stab         00002334  00000000  00000000  00002980  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000bb2  00000000  00000000  00004cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005866  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000059a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005b16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000775f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000864a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000093f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009558  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000097e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009fb3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 00 12 	jmp	0x2400	; 0x2400 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e3       	ldi	r30, 0x3A	; 58
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 31       	cpi	r26, 0x12	; 18
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e1       	ldi	r26, 0x12	; 18
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 31       	cpi	r26, 0x13	; 19
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 1b 14 	jmp	0x2836	; 0x2836 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9f 13 	jmp	0x273e	; 0x273e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e0       	ldi	r26, 0x09	; 9
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 bb 13 	jmp	0x2776	; 0x2776 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ab 13 	jmp	0x2756	; 0x2756 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c7 13 	jmp	0x278e	; 0x278e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ab 13 	jmp	0x2756	; 0x2756 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c7 13 	jmp	0x278e	; 0x278e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9f 13 	jmp	0x273e	; 0x273e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	89 e0       	ldi	r24, 0x09	; 9
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 bb 13 	jmp	0x2776	; 0x2776 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ab 13 	jmp	0x2756	; 0x2756 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c7 13 	jmp	0x278e	; 0x278e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ab 13 	jmp	0x2756	; 0x2756 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c7 13 	jmp	0x278e	; 0x278e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ab 13 	jmp	0x2756	; 0x2756 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c7 13 	jmp	0x278e	; 0x278e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 af 13 	jmp	0x275e	; 0x275e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 cb 13 	jmp	0x2796	; 0x2796 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:


#include "passwords.h"


int main (void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
uint8 t;


LCD_init();
     b50:	0e 94 8c 06 	call	0xd18	; 0xd18 <LCD_init>
UART_init();
     b54:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <UART_init>
SREG |=(1<<7);
     b58:	af e5       	ldi	r26, 0x5F	; 95
     b5a:	b0 e0       	ldi	r27, 0x00	; 0
     b5c:	ef e5       	ldi	r30, 0x5F	; 95
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	80 81       	ld	r24, Z
     b62:	80 68       	ori	r24, 0x80	; 128
     b64:	8c 93       	st	X, r24

initial_password();
     b66:	0e 94 2e 10 	call	0x205c	; 0x205c <initial_password>

while(1){

do{
	LCD_displayString("1: to open door");
     b6a:	80 e6       	ldi	r24, 0x60	; 96
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <LCD_displayString>
	LCD_goToRowColumn(1,0);
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	60 e0       	ldi	r22, 0x00	; 0
     b76:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <LCD_goToRowColumn>
	LCD_displayString("2:to change pass");
     b7a:	80 e7       	ldi	r24, 0x70	; 112
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <LCD_displayString>
	t = KeyPad_getPressedKey();
     b82:	0e 94 00 06 	call	0xc00	; 0xc00 <KeyPad_getPressedKey>
     b86:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(t);
     b88:	89 81       	ldd	r24, Y+1	; 0x01
     b8a:	0e 94 0a 13 	call	0x2614	; 0x2614 <UART_sendByte>
}
while(t !=1 && t!=2);
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
     b90:	81 30       	cpi	r24, 0x01	; 1
     b92:	19 f0       	breq	.+6      	; 0xb9a <main+0x54>
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	82 30       	cpi	r24, 0x02	; 2
     b98:	41 f7       	brne	.-48     	; 0xb6a <main+0x24>
LCD_clearScreen();
     b9a:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_clearScreen>
if(t==1){
     b9e:	89 81       	ldd	r24, Y+1	; 0x01
     ba0:	81 30       	cpi	r24, 0x01	; 1
     ba2:	f1 f4       	brne	.+60     	; 0xbe0 <main+0x9a>
	if(entering_password()==2){
     ba4:	0e 94 57 11 	call	0x22ae	; 0x22ae <entering_password>
     ba8:	82 30       	cpi	r24, 0x02	; 2
     baa:	49 f4       	brne	.+18     	; 0xbbe <main+0x78>
		LCD_displayString("failed");
     bac:	81 e8       	ldi	r24, 0x81	; 129
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <LCD_displayString>
		UART_recieveByte();
     bb4:	0e 94 21 13 	call	0x2642	; 0x2642 <UART_recieveByte>
		LCD_clearScreen();
     bb8:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_clearScreen>
     bbc:	d6 cf       	rjmp	.-84     	; 0xb6a <main+0x24>
	}
	else{LCD_displayString("door opening");
     bbe:	88 e8       	ldi	r24, 0x88	; 136
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <LCD_displayString>
	     UART_recieveByte();
     bc6:	0e 94 21 13 	call	0x2642	; 0x2642 <UART_recieveByte>
	     LCD_clearScreen();
     bca:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_clearScreen>
       	 LCD_displayString("door closing");
     bce:	85 e9       	ldi	r24, 0x95	; 149
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <LCD_displayString>
		 UART_recieveByte();
     bd6:	0e 94 21 13 	call	0x2642	; 0x2642 <UART_recieveByte>

	LCD_clearScreen();}
     bda:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_clearScreen>
     bde:	c5 cf       	rjmp	.-118    	; 0xb6a <main+0x24>
}
else {
	if(entering_password()==2){
     be0:	0e 94 57 11 	call	0x22ae	; 0x22ae <entering_password>
     be4:	82 30       	cpi	r24, 0x02	; 2
     be6:	49 f4       	brne	.+18     	; 0xbfa <main+0xb4>
		LCD_displayString("failed");
     be8:	81 e8       	ldi	r24, 0x81	; 129
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <LCD_displayString>
				UART_recieveByte();
     bf0:	0e 94 21 13 	call	0x2642	; 0x2642 <UART_recieveByte>
				LCD_clearScreen();
     bf4:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_clearScreen>
     bf8:	b8 cf       	rjmp	.-144    	; 0xb6a <main+0x24>
	continue;}
	else{
		initial_password();
     bfa:	0e 94 2e 10 	call	0x205c	; 0x205c <initial_password>
     bfe:	b5 cf       	rjmp	.-150    	; 0xb6a <main+0x24>

00000c00 <KeyPad_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void)
{
     c00:	df 93       	push	r29
     c02:	cf 93       	push	r28
     c04:	00 d0       	rcall	.+0      	; 0xc06 <KeyPad_getPressedKey+0x6>
     c06:	cd b7       	in	r28, 0x3d	; 61
     c08:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     c0a:	1a 82       	std	Y+2, r1	; 0x02
     c0c:	4d c0       	rjmp	.+154    	; 0xca8 <KeyPad_getPressedKey+0xa8>
		{
			/*
			 * each time only one of the column pins will be output and
			 * the rest will be input pins include the row pins
			 */
			KEYPAD_PORT_DIR = (0b00010000<<col);
     c0e:	ea e3       	ldi	r30, 0x3A	; 58
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	8a 81       	ldd	r24, Y+2	; 0x02
     c14:	28 2f       	mov	r18, r24
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	80 e1       	ldi	r24, 0x10	; 16
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	02 c0       	rjmp	.+4      	; 0xc22 <KeyPad_getPressedKey+0x22>
     c1e:	88 0f       	add	r24, r24
     c20:	99 1f       	adc	r25, r25
     c22:	2a 95       	dec	r18
     c24:	e2 f7       	brpl	.-8      	; 0xc1e <KeyPad_getPressedKey+0x1e>
     c26:	80 83       	st	Z, r24

			/*
			 * clear the output pin column in this trace and enable the internal
			 * pull up resistors for the rows pins
			 */
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
     c28:	eb e3       	ldi	r30, 0x3B	; 59
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	8a 81       	ldd	r24, Y+2	; 0x02
     c2e:	28 2f       	mov	r18, r24
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	80 e1       	ldi	r24, 0x10	; 16
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	02 2e       	mov	r0, r18
     c38:	02 c0       	rjmp	.+4      	; 0xc3e <KeyPad_getPressedKey+0x3e>
     c3a:	88 0f       	add	r24, r24
     c3c:	99 1f       	adc	r25, r25
     c3e:	0a 94       	dec	r0
     c40:	e2 f7       	brpl	.-8      	; 0xc3a <KeyPad_getPressedKey+0x3a>
     c42:	80 95       	com	r24
     c44:	80 83       	st	Z, r24

			for(row=0;row<N_row;row++) /* loop for rows */
     c46:	19 82       	std	Y+1, r1	; 0x01
     c48:	29 c0       	rjmp	.+82     	; 0xc9c <KeyPad_getPressedKey+0x9c>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */
     c4a:	e9 e3       	ldi	r30, 0x39	; 57
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	80 81       	ld	r24, Z
     c50:	28 2f       	mov	r18, r24
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	89 81       	ldd	r24, Y+1	; 0x01
     c56:	88 2f       	mov	r24, r24
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	a9 01       	movw	r20, r18
     c5c:	02 c0       	rjmp	.+4      	; 0xc62 <KeyPad_getPressedKey+0x62>
     c5e:	55 95       	asr	r21
     c60:	47 95       	ror	r20
     c62:	8a 95       	dec	r24
     c64:	e2 f7       	brpl	.-8      	; 0xc5e <KeyPad_getPressedKey+0x5e>
     c66:	ca 01       	movw	r24, r20
     c68:	81 70       	andi	r24, 0x01	; 1
     c6a:	90 70       	andi	r25, 0x00	; 0
     c6c:	00 97       	sbiw	r24, 0x00	; 0
     c6e:	99 f4       	brne	.+38     	; 0xc96 <KeyPad_getPressedKey+0x96>
				{
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
     c70:	89 81       	ldd	r24, Y+1	; 0x01
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	c9 01       	movw	r24, r18
     c78:	88 0f       	add	r24, r24
     c7a:	99 1f       	adc	r25, r25
     c7c:	82 0f       	add	r24, r18
     c7e:	93 1f       	adc	r25, r19
     c80:	98 2f       	mov	r25, r24
     c82:	8a 81       	ldd	r24, Y+2	; 0x02
     c84:	89 0f       	add	r24, r25
     c86:	8f 5f       	subi	r24, 0xFF	; 255
     c88:	0e 94 59 06 	call	0xcb2	; 0xcb2 <KeyPad_4x3_adjustKeyNumber>
					#endif
				}
			}
		}
	}
}
     c8c:	0f 90       	pop	r0
     c8e:	0f 90       	pop	r0
     c90:	cf 91       	pop	r28
     c92:	df 91       	pop	r29
     c94:	08 95       	ret
			 * clear the output pin column in this trace and enable the internal
			 * pull up resistors for the rows pins
			 */
			KEYPAD_PORT_OUT = (~(0b00010000<<col));

			for(row=0;row<N_row;row++) /* loop for rows */
     c96:	89 81       	ldd	r24, Y+1	; 0x01
     c98:	8f 5f       	subi	r24, 0xFF	; 255
     c9a:	89 83       	std	Y+1, r24	; 0x01
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	84 30       	cpi	r24, 0x04	; 4
     ca0:	a0 f2       	brcs	.-88     	; 0xc4a <KeyPad_getPressedKey+0x4a>
uint8 KeyPad_getPressedKey(void)
{
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     ca2:	8a 81       	ldd	r24, Y+2	; 0x02
     ca4:	8f 5f       	subi	r24, 0xFF	; 255
     ca6:	8a 83       	std	Y+2, r24	; 0x02
     ca8:	8a 81       	ldd	r24, Y+2	; 0x02
     caa:	83 30       	cpi	r24, 0x03	; 3
     cac:	08 f4       	brcc	.+2      	; 0xcb0 <KeyPad_getPressedKey+0xb0>
     cae:	af cf       	rjmp	.-162    	; 0xc0e <KeyPad_getPressedKey+0xe>
     cb0:	ac cf       	rjmp	.-168    	; 0xc0a <KeyPad_getPressedKey+0xa>

00000cb2 <KeyPad_4x3_adjustKeyNumber>:
}

#if (N_col == 3)

static uint8 KeyPad_4x3_adjustKeyNumber(uint8 button_number)
{
     cb2:	df 93       	push	r29
     cb4:	cf 93       	push	r28
     cb6:	00 d0       	rcall	.+0      	; 0xcb8 <KeyPad_4x3_adjustKeyNumber+0x6>
     cb8:	00 d0       	rcall	.+0      	; 0xcba <KeyPad_4x3_adjustKeyNumber+0x8>
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
     cbe:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
     cc0:	89 81       	ldd	r24, Y+1	; 0x01
     cc2:	28 2f       	mov	r18, r24
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	3c 83       	std	Y+4, r19	; 0x04
     cc8:	2b 83       	std	Y+3, r18	; 0x03
     cca:	8b 81       	ldd	r24, Y+3	; 0x03
     ccc:	9c 81       	ldd	r25, Y+4	; 0x04
     cce:	8a 30       	cpi	r24, 0x0A	; 10
     cd0:	91 05       	cpc	r25, r1
     cd2:	81 f0       	breq	.+32     	; 0xcf4 <KeyPad_4x3_adjustKeyNumber+0x42>
     cd4:	2b 81       	ldd	r18, Y+3	; 0x03
     cd6:	3c 81       	ldd	r19, Y+4	; 0x04
     cd8:	2a 30       	cpi	r18, 0x0A	; 10
     cda:	31 05       	cpc	r19, r1
     cdc:	9c f0       	brlt	.+38     	; 0xd04 <KeyPad_4x3_adjustKeyNumber+0x52>
     cde:	8b 81       	ldd	r24, Y+3	; 0x03
     ce0:	9c 81       	ldd	r25, Y+4	; 0x04
     ce2:	8b 30       	cpi	r24, 0x0B	; 11
     ce4:	91 05       	cpc	r25, r1
     ce6:	49 f0       	breq	.+18     	; 0xcfa <KeyPad_4x3_adjustKeyNumber+0x48>
     ce8:	2b 81       	ldd	r18, Y+3	; 0x03
     cea:	3c 81       	ldd	r19, Y+4	; 0x04
     cec:	2c 30       	cpi	r18, 0x0C	; 12
     cee:	31 05       	cpc	r19, r1
     cf0:	31 f0       	breq	.+12     	; 0xcfe <KeyPad_4x3_adjustKeyNumber+0x4c>
     cf2:	08 c0       	rjmp	.+16     	; 0xd04 <KeyPad_4x3_adjustKeyNumber+0x52>
	{
		case 10: return '*'; // ASCII Code of *
     cf4:	3a e2       	ldi	r19, 0x2A	; 42
     cf6:	3a 83       	std	Y+2, r19	; 0x02
     cf8:	07 c0       	rjmp	.+14     	; 0xd08 <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;
		case 11: return 0;
     cfa:	1a 82       	std	Y+2, r1	; 0x02
     cfc:	05 c0       	rjmp	.+10     	; 0xd08 <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;
		case 12: return '#'; // ASCII Code of #
     cfe:	83 e2       	ldi	r24, 0x23	; 35
     d00:	8a 83       	std	Y+2, r24	; 0x02
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;
		default: return button_number;
     d04:	99 81       	ldd	r25, Y+1	; 0x01
     d06:	9a 83       	std	Y+2, r25	; 0x02
     d08:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
     d0a:	0f 90       	pop	r0
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	cf 91       	pop	r28
     d14:	df 91       	pop	r29
     d16:	08 95       	ret

00000d18 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
     d18:	df 93       	push	r29
     d1a:	cf 93       	push	r28
     d1c:	cd b7       	in	r28, 0x3d	; 61
     d1e:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
     d20:	a1 e3       	ldi	r26, 0x31	; 49
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	e1 e3       	ldi	r30, 0x31	; 49
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	80 67       	ori	r24, 0x70	; 112
     d2c:	8c 93       	st	X, r24

	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
     d2e:	a4 e3       	ldi	r26, 0x34	; 52
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	e4 e3       	ldi	r30, 0x34	; 52
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	80 6f       	ori	r24, 0xF0	; 240
     d3a:	8c 93       	st	X, r24
		#else
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
     d3c:	82 e0       	ldi	r24, 0x02	; 2
     d3e:	0e 94 ad 06 	call	0xd5a	; 0xd5a <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
     d42:	88 e2       	ldi	r24, 0x28	; 40
     d44:	0e 94 ad 06 	call	0xd5a	; 0xd5a <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif

	LCD_sendCommand(CURSOR_OFF); /* cursor off */
     d48:	8c e0       	ldi	r24, 0x0C	; 12
     d4a:	0e 94 ad 06 	call	0xd5a	; 0xd5a <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	0e 94 ad 06 	call	0xd5a	; 0xd5a <LCD_sendCommand>
}
     d54:	cf 91       	pop	r28
     d56:	df 91       	pop	r29
     d58:	08 95       	ret

00000d5a <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
     d5a:	0f 93       	push	r16
     d5c:	1f 93       	push	r17
     d5e:	df 93       	push	r29
     d60:	cf 93       	push	r28
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
     d66:	c3 56       	subi	r28, 0x63	; 99
     d68:	d0 40       	sbci	r29, 0x00	; 0
     d6a:	0f b6       	in	r0, 0x3f	; 63
     d6c:	f8 94       	cli
     d6e:	de bf       	out	0x3e, r29	; 62
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	cd bf       	out	0x3d, r28	; 61
     d74:	fe 01       	movw	r30, r28
     d76:	ed 59       	subi	r30, 0x9D	; 157
     d78:	ff 4f       	sbci	r31, 0xFF	; 255
     d7a:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
     d7c:	a2 e3       	ldi	r26, 0x32	; 50
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e2 e3       	ldi	r30, 0x32	; 50
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	8f 7e       	andi	r24, 0xEF	; 239
     d88:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
     d8a:	a2 e3       	ldi	r26, 0x32	; 50
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e2 e3       	ldi	r30, 0x32	; 50
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	8f 7d       	andi	r24, 0xDF	; 223
     d96:	8c 93       	st	X, r24
     d98:	fe 01       	movw	r30, r28
     d9a:	e1 5a       	subi	r30, 0xA1	; 161
     d9c:	ff 4f       	sbci	r31, 0xFF	; 255
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	a0 e8       	ldi	r26, 0x80	; 128
     da4:	bf e3       	ldi	r27, 0x3F	; 63
     da6:	80 83       	st	Z, r24
     da8:	91 83       	std	Z+1, r25	; 0x01
     daa:	a2 83       	std	Z+2, r26	; 0x02
     dac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dae:	8e 01       	movw	r16, r28
     db0:	05 5a       	subi	r16, 0xA5	; 165
     db2:	1f 4f       	sbci	r17, 0xFF	; 255
     db4:	fe 01       	movw	r30, r28
     db6:	e1 5a       	subi	r30, 0xA1	; 161
     db8:	ff 4f       	sbci	r31, 0xFF	; 255
     dba:	60 81       	ld	r22, Z
     dbc:	71 81       	ldd	r23, Z+1	; 0x01
     dbe:	82 81       	ldd	r24, Z+2	; 0x02
     dc0:	93 81       	ldd	r25, Z+3	; 0x03
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	4a e7       	ldi	r20, 0x7A	; 122
     dc8:	53 e4       	ldi	r21, 0x43	; 67
     dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dce:	dc 01       	movw	r26, r24
     dd0:	cb 01       	movw	r24, r22
     dd2:	f8 01       	movw	r30, r16
     dd4:	80 83       	st	Z, r24
     dd6:	91 83       	std	Z+1, r25	; 0x01
     dd8:	a2 83       	std	Z+2, r26	; 0x02
     dda:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ddc:	fe 01       	movw	r30, r28
     dde:	e5 5a       	subi	r30, 0xA5	; 165
     de0:	ff 4f       	sbci	r31, 0xFF	; 255
     de2:	60 81       	ld	r22, Z
     de4:	71 81       	ldd	r23, Z+1	; 0x01
     de6:	82 81       	ldd	r24, Z+2	; 0x02
     de8:	93 81       	ldd	r25, Z+3	; 0x03
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	40 e8       	ldi	r20, 0x80	; 128
     df0:	5f e3       	ldi	r21, 0x3F	; 63
     df2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     df6:	88 23       	and	r24, r24
     df8:	44 f4       	brge	.+16     	; 0xe0a <LCD_sendCommand+0xb0>
		__ticks = 1;
     dfa:	fe 01       	movw	r30, r28
     dfc:	e7 5a       	subi	r30, 0xA7	; 167
     dfe:	ff 4f       	sbci	r31, 0xFF	; 255
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	91 83       	std	Z+1, r25	; 0x01
     e06:	80 83       	st	Z, r24
     e08:	64 c0       	rjmp	.+200    	; 0xed2 <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
     e0a:	fe 01       	movw	r30, r28
     e0c:	e5 5a       	subi	r30, 0xA5	; 165
     e0e:	ff 4f       	sbci	r31, 0xFF	; 255
     e10:	60 81       	ld	r22, Z
     e12:	71 81       	ldd	r23, Z+1	; 0x01
     e14:	82 81       	ldd	r24, Z+2	; 0x02
     e16:	93 81       	ldd	r25, Z+3	; 0x03
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	3f ef       	ldi	r19, 0xFF	; 255
     e1c:	4f e7       	ldi	r20, 0x7F	; 127
     e1e:	57 e4       	ldi	r21, 0x47	; 71
     e20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e24:	18 16       	cp	r1, r24
     e26:	0c f0       	brlt	.+2      	; 0xe2a <LCD_sendCommand+0xd0>
     e28:	43 c0       	rjmp	.+134    	; 0xeb0 <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e2a:	fe 01       	movw	r30, r28
     e2c:	e1 5a       	subi	r30, 0xA1	; 161
     e2e:	ff 4f       	sbci	r31, 0xFF	; 255
     e30:	60 81       	ld	r22, Z
     e32:	71 81       	ldd	r23, Z+1	; 0x01
     e34:	82 81       	ldd	r24, Z+2	; 0x02
     e36:	93 81       	ldd	r25, Z+3	; 0x03
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	40 e2       	ldi	r20, 0x20	; 32
     e3e:	51 e4       	ldi	r21, 0x41	; 65
     e40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e44:	dc 01       	movw	r26, r24
     e46:	cb 01       	movw	r24, r22
     e48:	8e 01       	movw	r16, r28
     e4a:	07 5a       	subi	r16, 0xA7	; 167
     e4c:	1f 4f       	sbci	r17, 0xFF	; 255
     e4e:	bc 01       	movw	r22, r24
     e50:	cd 01       	movw	r24, r26
     e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e56:	dc 01       	movw	r26, r24
     e58:	cb 01       	movw	r24, r22
     e5a:	f8 01       	movw	r30, r16
     e5c:	91 83       	std	Z+1, r25	; 0x01
     e5e:	80 83       	st	Z, r24
     e60:	1f c0       	rjmp	.+62     	; 0xea0 <LCD_sendCommand+0x146>
     e62:	fe 01       	movw	r30, r28
     e64:	e9 5a       	subi	r30, 0xA9	; 169
     e66:	ff 4f       	sbci	r31, 0xFF	; 255
     e68:	89 e1       	ldi	r24, 0x19	; 25
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	91 83       	std	Z+1, r25	; 0x01
     e6e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e70:	fe 01       	movw	r30, r28
     e72:	e9 5a       	subi	r30, 0xA9	; 169
     e74:	ff 4f       	sbci	r31, 0xFF	; 255
     e76:	80 81       	ld	r24, Z
     e78:	91 81       	ldd	r25, Z+1	; 0x01
     e7a:	01 97       	sbiw	r24, 0x01	; 1
     e7c:	f1 f7       	brne	.-4      	; 0xe7a <LCD_sendCommand+0x120>
     e7e:	fe 01       	movw	r30, r28
     e80:	e9 5a       	subi	r30, 0xA9	; 169
     e82:	ff 4f       	sbci	r31, 0xFF	; 255
     e84:	91 83       	std	Z+1, r25	; 0x01
     e86:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e88:	de 01       	movw	r26, r28
     e8a:	a7 5a       	subi	r26, 0xA7	; 167
     e8c:	bf 4f       	sbci	r27, 0xFF	; 255
     e8e:	fe 01       	movw	r30, r28
     e90:	e7 5a       	subi	r30, 0xA7	; 167
     e92:	ff 4f       	sbci	r31, 0xFF	; 255
     e94:	80 81       	ld	r24, Z
     e96:	91 81       	ldd	r25, Z+1	; 0x01
     e98:	01 97       	sbiw	r24, 0x01	; 1
     e9a:	11 96       	adiw	r26, 0x01	; 1
     e9c:	9c 93       	st	X, r25
     e9e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ea0:	fe 01       	movw	r30, r28
     ea2:	e7 5a       	subi	r30, 0xA7	; 167
     ea4:	ff 4f       	sbci	r31, 0xFF	; 255
     ea6:	80 81       	ld	r24, Z
     ea8:	91 81       	ldd	r25, Z+1	; 0x01
     eaa:	00 97       	sbiw	r24, 0x00	; 0
     eac:	d1 f6       	brne	.-76     	; 0xe62 <LCD_sendCommand+0x108>
     eae:	27 c0       	rjmp	.+78     	; 0xefe <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eb0:	8e 01       	movw	r16, r28
     eb2:	07 5a       	subi	r16, 0xA7	; 167
     eb4:	1f 4f       	sbci	r17, 0xFF	; 255
     eb6:	fe 01       	movw	r30, r28
     eb8:	e5 5a       	subi	r30, 0xA5	; 165
     eba:	ff 4f       	sbci	r31, 0xFF	; 255
     ebc:	60 81       	ld	r22, Z
     ebe:	71 81       	ldd	r23, Z+1	; 0x01
     ec0:	82 81       	ldd	r24, Z+2	; 0x02
     ec2:	93 81       	ldd	r25, Z+3	; 0x03
     ec4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ec8:	dc 01       	movw	r26, r24
     eca:	cb 01       	movw	r24, r22
     ecc:	f8 01       	movw	r30, r16
     ece:	91 83       	std	Z+1, r25	; 0x01
     ed0:	80 83       	st	Z, r24
     ed2:	de 01       	movw	r26, r28
     ed4:	ab 5a       	subi	r26, 0xAB	; 171
     ed6:	bf 4f       	sbci	r27, 0xFF	; 255
     ed8:	fe 01       	movw	r30, r28
     eda:	e7 5a       	subi	r30, 0xA7	; 167
     edc:	ff 4f       	sbci	r31, 0xFF	; 255
     ede:	80 81       	ld	r24, Z
     ee0:	91 81       	ldd	r25, Z+1	; 0x01
     ee2:	8d 93       	st	X+, r24
     ee4:	9c 93       	st	X, r25
     ee6:	fe 01       	movw	r30, r28
     ee8:	eb 5a       	subi	r30, 0xAB	; 171
     eea:	ff 4f       	sbci	r31, 0xFF	; 255
     eec:	80 81       	ld	r24, Z
     eee:	91 81       	ldd	r25, Z+1	; 0x01
     ef0:	01 97       	sbiw	r24, 0x01	; 1
     ef2:	f1 f7       	brne	.-4      	; 0xef0 <LCD_sendCommand+0x196>
     ef4:	fe 01       	movw	r30, r28
     ef6:	eb 5a       	subi	r30, 0xAB	; 171
     ef8:	ff 4f       	sbci	r31, 0xFF	; 255
     efa:	91 83       	std	Z+1, r25	; 0x01
     efc:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
     efe:	a2 e3       	ldi	r26, 0x32	; 50
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e2 e3       	ldi	r30, 0x32	; 50
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	80 64       	ori	r24, 0x40	; 64
     f0a:	8c 93       	st	X, r24
     f0c:	fe 01       	movw	r30, r28
     f0e:	ef 5a       	subi	r30, 0xAF	; 175
     f10:	ff 4f       	sbci	r31, 0xFF	; 255
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	a0 e8       	ldi	r26, 0x80	; 128
     f18:	bf e3       	ldi	r27, 0x3F	; 63
     f1a:	80 83       	st	Z, r24
     f1c:	91 83       	std	Z+1, r25	; 0x01
     f1e:	a2 83       	std	Z+2, r26	; 0x02
     f20:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f22:	8e 01       	movw	r16, r28
     f24:	03 5b       	subi	r16, 0xB3	; 179
     f26:	1f 4f       	sbci	r17, 0xFF	; 255
     f28:	fe 01       	movw	r30, r28
     f2a:	ef 5a       	subi	r30, 0xAF	; 175
     f2c:	ff 4f       	sbci	r31, 0xFF	; 255
     f2e:	60 81       	ld	r22, Z
     f30:	71 81       	ldd	r23, Z+1	; 0x01
     f32:	82 81       	ldd	r24, Z+2	; 0x02
     f34:	93 81       	ldd	r25, Z+3	; 0x03
     f36:	20 e0       	ldi	r18, 0x00	; 0
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	4a e7       	ldi	r20, 0x7A	; 122
     f3c:	53 e4       	ldi	r21, 0x43	; 67
     f3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f42:	dc 01       	movw	r26, r24
     f44:	cb 01       	movw	r24, r22
     f46:	f8 01       	movw	r30, r16
     f48:	80 83       	st	Z, r24
     f4a:	91 83       	std	Z+1, r25	; 0x01
     f4c:	a2 83       	std	Z+2, r26	; 0x02
     f4e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f50:	fe 01       	movw	r30, r28
     f52:	e3 5b       	subi	r30, 0xB3	; 179
     f54:	ff 4f       	sbci	r31, 0xFF	; 255
     f56:	60 81       	ld	r22, Z
     f58:	71 81       	ldd	r23, Z+1	; 0x01
     f5a:	82 81       	ldd	r24, Z+2	; 0x02
     f5c:	93 81       	ldd	r25, Z+3	; 0x03
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	40 e8       	ldi	r20, 0x80	; 128
     f64:	5f e3       	ldi	r21, 0x3F	; 63
     f66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f6a:	88 23       	and	r24, r24
     f6c:	44 f4       	brge	.+16     	; 0xf7e <LCD_sendCommand+0x224>
		__ticks = 1;
     f6e:	fe 01       	movw	r30, r28
     f70:	e5 5b       	subi	r30, 0xB5	; 181
     f72:	ff 4f       	sbci	r31, 0xFF	; 255
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	91 83       	std	Z+1, r25	; 0x01
     f7a:	80 83       	st	Z, r24
     f7c:	64 c0       	rjmp	.+200    	; 0x1046 <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
     f7e:	fe 01       	movw	r30, r28
     f80:	e3 5b       	subi	r30, 0xB3	; 179
     f82:	ff 4f       	sbci	r31, 0xFF	; 255
     f84:	60 81       	ld	r22, Z
     f86:	71 81       	ldd	r23, Z+1	; 0x01
     f88:	82 81       	ldd	r24, Z+2	; 0x02
     f8a:	93 81       	ldd	r25, Z+3	; 0x03
     f8c:	20 e0       	ldi	r18, 0x00	; 0
     f8e:	3f ef       	ldi	r19, 0xFF	; 255
     f90:	4f e7       	ldi	r20, 0x7F	; 127
     f92:	57 e4       	ldi	r21, 0x47	; 71
     f94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f98:	18 16       	cp	r1, r24
     f9a:	0c f0       	brlt	.+2      	; 0xf9e <LCD_sendCommand+0x244>
     f9c:	43 c0       	rjmp	.+134    	; 0x1024 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f9e:	fe 01       	movw	r30, r28
     fa0:	ef 5a       	subi	r30, 0xAF	; 175
     fa2:	ff 4f       	sbci	r31, 0xFF	; 255
     fa4:	60 81       	ld	r22, Z
     fa6:	71 81       	ldd	r23, Z+1	; 0x01
     fa8:	82 81       	ldd	r24, Z+2	; 0x02
     faa:	93 81       	ldd	r25, Z+3	; 0x03
     fac:	20 e0       	ldi	r18, 0x00	; 0
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	40 e2       	ldi	r20, 0x20	; 32
     fb2:	51 e4       	ldi	r21, 0x41	; 65
     fb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fb8:	dc 01       	movw	r26, r24
     fba:	cb 01       	movw	r24, r22
     fbc:	8e 01       	movw	r16, r28
     fbe:	05 5b       	subi	r16, 0xB5	; 181
     fc0:	1f 4f       	sbci	r17, 0xFF	; 255
     fc2:	bc 01       	movw	r22, r24
     fc4:	cd 01       	movw	r24, r26
     fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fca:	dc 01       	movw	r26, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	f8 01       	movw	r30, r16
     fd0:	91 83       	std	Z+1, r25	; 0x01
     fd2:	80 83       	st	Z, r24
     fd4:	1f c0       	rjmp	.+62     	; 0x1014 <LCD_sendCommand+0x2ba>
     fd6:	fe 01       	movw	r30, r28
     fd8:	e7 5b       	subi	r30, 0xB7	; 183
     fda:	ff 4f       	sbci	r31, 0xFF	; 255
     fdc:	89 e1       	ldi	r24, 0x19	; 25
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	91 83       	std	Z+1, r25	; 0x01
     fe2:	80 83       	st	Z, r24
     fe4:	fe 01       	movw	r30, r28
     fe6:	e7 5b       	subi	r30, 0xB7	; 183
     fe8:	ff 4f       	sbci	r31, 0xFF	; 255
     fea:	80 81       	ld	r24, Z
     fec:	91 81       	ldd	r25, Z+1	; 0x01
     fee:	01 97       	sbiw	r24, 0x01	; 1
     ff0:	f1 f7       	brne	.-4      	; 0xfee <LCD_sendCommand+0x294>
     ff2:	fe 01       	movw	r30, r28
     ff4:	e7 5b       	subi	r30, 0xB7	; 183
     ff6:	ff 4f       	sbci	r31, 0xFF	; 255
     ff8:	91 83       	std	Z+1, r25	; 0x01
     ffa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ffc:	de 01       	movw	r26, r28
     ffe:	a5 5b       	subi	r26, 0xB5	; 181
    1000:	bf 4f       	sbci	r27, 0xFF	; 255
    1002:	fe 01       	movw	r30, r28
    1004:	e5 5b       	subi	r30, 0xB5	; 181
    1006:	ff 4f       	sbci	r31, 0xFF	; 255
    1008:	80 81       	ld	r24, Z
    100a:	91 81       	ldd	r25, Z+1	; 0x01
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	11 96       	adiw	r26, 0x01	; 1
    1010:	9c 93       	st	X, r25
    1012:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1014:	fe 01       	movw	r30, r28
    1016:	e5 5b       	subi	r30, 0xB5	; 181
    1018:	ff 4f       	sbci	r31, 0xFF	; 255
    101a:	80 81       	ld	r24, Z
    101c:	91 81       	ldd	r25, Z+1	; 0x01
    101e:	00 97       	sbiw	r24, 0x00	; 0
    1020:	d1 f6       	brne	.-76     	; 0xfd6 <LCD_sendCommand+0x27c>
    1022:	27 c0       	rjmp	.+78     	; 0x1072 <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1024:	8e 01       	movw	r16, r28
    1026:	05 5b       	subi	r16, 0xB5	; 181
    1028:	1f 4f       	sbci	r17, 0xFF	; 255
    102a:	fe 01       	movw	r30, r28
    102c:	e3 5b       	subi	r30, 0xB3	; 179
    102e:	ff 4f       	sbci	r31, 0xFF	; 255
    1030:	60 81       	ld	r22, Z
    1032:	71 81       	ldd	r23, Z+1	; 0x01
    1034:	82 81       	ldd	r24, Z+2	; 0x02
    1036:	93 81       	ldd	r25, Z+3	; 0x03
    1038:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    103c:	dc 01       	movw	r26, r24
    103e:	cb 01       	movw	r24, r22
    1040:	f8 01       	movw	r30, r16
    1042:	91 83       	std	Z+1, r25	; 0x01
    1044:	80 83       	st	Z, r24
    1046:	de 01       	movw	r26, r28
    1048:	a9 5b       	subi	r26, 0xB9	; 185
    104a:	bf 4f       	sbci	r27, 0xFF	; 255
    104c:	fe 01       	movw	r30, r28
    104e:	e5 5b       	subi	r30, 0xB5	; 181
    1050:	ff 4f       	sbci	r31, 0xFF	; 255
    1052:	80 81       	ld	r24, Z
    1054:	91 81       	ldd	r25, Z+1	; 0x01
    1056:	8d 93       	st	X+, r24
    1058:	9c 93       	st	X, r25
    105a:	fe 01       	movw	r30, r28
    105c:	e9 5b       	subi	r30, 0xB9	; 185
    105e:	ff 4f       	sbci	r31, 0xFF	; 255
    1060:	80 81       	ld	r24, Z
    1062:	91 81       	ldd	r25, Z+1	; 0x01
    1064:	01 97       	sbiw	r24, 0x01	; 1
    1066:	f1 f7       	brne	.-4      	; 0x1064 <LCD_sendCommand+0x30a>
    1068:	fe 01       	movw	r30, r28
    106a:	e9 5b       	subi	r30, 0xB9	; 185
    106c:	ff 4f       	sbci	r31, 0xFF	; 255
    106e:	91 83       	std	Z+1, r25	; 0x01
    1070:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
    1072:	a5 e3       	ldi	r26, 0x35	; 53
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e5 e3       	ldi	r30, 0x35	; 53
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	98 2f       	mov	r25, r24
    107e:	9f 70       	andi	r25, 0x0F	; 15
    1080:	fe 01       	movw	r30, r28
    1082:	ed 59       	subi	r30, 0x9D	; 157
    1084:	ff 4f       	sbci	r31, 0xFF	; 255
    1086:	80 81       	ld	r24, Z
    1088:	80 7f       	andi	r24, 0xF0	; 240
    108a:	89 2b       	or	r24, r25
    108c:	8c 93       	st	X, r24
    108e:	fe 01       	movw	r30, r28
    1090:	ed 5b       	subi	r30, 0xBD	; 189
    1092:	ff 4f       	sbci	r31, 0xFF	; 255
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	a0 e8       	ldi	r26, 0x80	; 128
    109a:	bf e3       	ldi	r27, 0x3F	; 63
    109c:	80 83       	st	Z, r24
    109e:	91 83       	std	Z+1, r25	; 0x01
    10a0:	a2 83       	std	Z+2, r26	; 0x02
    10a2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10a4:	8e 01       	movw	r16, r28
    10a6:	01 5c       	subi	r16, 0xC1	; 193
    10a8:	1f 4f       	sbci	r17, 0xFF	; 255
    10aa:	fe 01       	movw	r30, r28
    10ac:	ed 5b       	subi	r30, 0xBD	; 189
    10ae:	ff 4f       	sbci	r31, 0xFF	; 255
    10b0:	60 81       	ld	r22, Z
    10b2:	71 81       	ldd	r23, Z+1	; 0x01
    10b4:	82 81       	ldd	r24, Z+2	; 0x02
    10b6:	93 81       	ldd	r25, Z+3	; 0x03
    10b8:	20 e0       	ldi	r18, 0x00	; 0
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	4a e7       	ldi	r20, 0x7A	; 122
    10be:	53 e4       	ldi	r21, 0x43	; 67
    10c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10c4:	dc 01       	movw	r26, r24
    10c6:	cb 01       	movw	r24, r22
    10c8:	f8 01       	movw	r30, r16
    10ca:	80 83       	st	Z, r24
    10cc:	91 83       	std	Z+1, r25	; 0x01
    10ce:	a2 83       	std	Z+2, r26	; 0x02
    10d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10d2:	fe 01       	movw	r30, r28
    10d4:	ff 96       	adiw	r30, 0x3f	; 63
    10d6:	60 81       	ld	r22, Z
    10d8:	71 81       	ldd	r23, Z+1	; 0x01
    10da:	82 81       	ldd	r24, Z+2	; 0x02
    10dc:	93 81       	ldd	r25, Z+3	; 0x03
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	40 e8       	ldi	r20, 0x80	; 128
    10e4:	5f e3       	ldi	r21, 0x3F	; 63
    10e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10ea:	88 23       	and	r24, r24
    10ec:	2c f4       	brge	.+10     	; 0x10f8 <LCD_sendCommand+0x39e>
		__ticks = 1;
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	9e af       	std	Y+62, r25	; 0x3e
    10f4:	8d af       	std	Y+61, r24	; 0x3d
    10f6:	46 c0       	rjmp	.+140    	; 0x1184 <LCD_sendCommand+0x42a>
	else if (__tmp > 65535)
    10f8:	fe 01       	movw	r30, r28
    10fa:	ff 96       	adiw	r30, 0x3f	; 63
    10fc:	60 81       	ld	r22, Z
    10fe:	71 81       	ldd	r23, Z+1	; 0x01
    1100:	82 81       	ldd	r24, Z+2	; 0x02
    1102:	93 81       	ldd	r25, Z+3	; 0x03
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	3f ef       	ldi	r19, 0xFF	; 255
    1108:	4f e7       	ldi	r20, 0x7F	; 127
    110a:	57 e4       	ldi	r21, 0x47	; 71
    110c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1110:	18 16       	cp	r1, r24
    1112:	64 f5       	brge	.+88     	; 0x116c <LCD_sendCommand+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1114:	fe 01       	movw	r30, r28
    1116:	ed 5b       	subi	r30, 0xBD	; 189
    1118:	ff 4f       	sbci	r31, 0xFF	; 255
    111a:	60 81       	ld	r22, Z
    111c:	71 81       	ldd	r23, Z+1	; 0x01
    111e:	82 81       	ldd	r24, Z+2	; 0x02
    1120:	93 81       	ldd	r25, Z+3	; 0x03
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	40 e2       	ldi	r20, 0x20	; 32
    1128:	51 e4       	ldi	r21, 0x41	; 65
    112a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    112e:	dc 01       	movw	r26, r24
    1130:	cb 01       	movw	r24, r22
    1132:	bc 01       	movw	r22, r24
    1134:	cd 01       	movw	r24, r26
    1136:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    113a:	dc 01       	movw	r26, r24
    113c:	cb 01       	movw	r24, r22
    113e:	9e af       	std	Y+62, r25	; 0x3e
    1140:	8d af       	std	Y+61, r24	; 0x3d
    1142:	0f c0       	rjmp	.+30     	; 0x1162 <LCD_sendCommand+0x408>
    1144:	89 e1       	ldi	r24, 0x19	; 25
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	9c af       	std	Y+60, r25	; 0x3c
    114a:	8b af       	std	Y+59, r24	; 0x3b
    114c:	8b ad       	ldd	r24, Y+59	; 0x3b
    114e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1150:	01 97       	sbiw	r24, 0x01	; 1
    1152:	f1 f7       	brne	.-4      	; 0x1150 <LCD_sendCommand+0x3f6>
    1154:	9c af       	std	Y+60, r25	; 0x3c
    1156:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1158:	8d ad       	ldd	r24, Y+61	; 0x3d
    115a:	9e ad       	ldd	r25, Y+62	; 0x3e
    115c:	01 97       	sbiw	r24, 0x01	; 1
    115e:	9e af       	std	Y+62, r25	; 0x3e
    1160:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1162:	8d ad       	ldd	r24, Y+61	; 0x3d
    1164:	9e ad       	ldd	r25, Y+62	; 0x3e
    1166:	00 97       	sbiw	r24, 0x00	; 0
    1168:	69 f7       	brne	.-38     	; 0x1144 <LCD_sendCommand+0x3ea>
    116a:	16 c0       	rjmp	.+44     	; 0x1198 <LCD_sendCommand+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    116c:	fe 01       	movw	r30, r28
    116e:	ff 96       	adiw	r30, 0x3f	; 63
    1170:	60 81       	ld	r22, Z
    1172:	71 81       	ldd	r23, Z+1	; 0x01
    1174:	82 81       	ldd	r24, Z+2	; 0x02
    1176:	93 81       	ldd	r25, Z+3	; 0x03
    1178:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    117c:	dc 01       	movw	r26, r24
    117e:	cb 01       	movw	r24, r22
    1180:	9e af       	std	Y+62, r25	; 0x3e
    1182:	8d af       	std	Y+61, r24	; 0x3d
    1184:	8d ad       	ldd	r24, Y+61	; 0x3d
    1186:	9e ad       	ldd	r25, Y+62	; 0x3e
    1188:	9a af       	std	Y+58, r25	; 0x3a
    118a:	89 af       	std	Y+57, r24	; 0x39
    118c:	89 ad       	ldd	r24, Y+57	; 0x39
    118e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1190:	01 97       	sbiw	r24, 0x01	; 1
    1192:	f1 f7       	brne	.-4      	; 0x1190 <LCD_sendCommand+0x436>
    1194:	9a af       	std	Y+58, r25	; 0x3a
    1196:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1198:	a2 e3       	ldi	r26, 0x32	; 50
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e2 e3       	ldi	r30, 0x32	; 50
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	8f 7b       	andi	r24, 0xBF	; 191
    11a4:	8c 93       	st	X, r24
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	a0 e8       	ldi	r26, 0x80	; 128
    11ac:	bf e3       	ldi	r27, 0x3F	; 63
    11ae:	8d ab       	std	Y+53, r24	; 0x35
    11b0:	9e ab       	std	Y+54, r25	; 0x36
    11b2:	af ab       	std	Y+55, r26	; 0x37
    11b4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11b6:	6d a9       	ldd	r22, Y+53	; 0x35
    11b8:	7e a9       	ldd	r23, Y+54	; 0x36
    11ba:	8f a9       	ldd	r24, Y+55	; 0x37
    11bc:	98 ad       	ldd	r25, Y+56	; 0x38
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	4a e7       	ldi	r20, 0x7A	; 122
    11c4:	53 e4       	ldi	r21, 0x43	; 67
    11c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ca:	dc 01       	movw	r26, r24
    11cc:	cb 01       	movw	r24, r22
    11ce:	89 ab       	std	Y+49, r24	; 0x31
    11d0:	9a ab       	std	Y+50, r25	; 0x32
    11d2:	ab ab       	std	Y+51, r26	; 0x33
    11d4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    11d6:	69 a9       	ldd	r22, Y+49	; 0x31
    11d8:	7a a9       	ldd	r23, Y+50	; 0x32
    11da:	8b a9       	ldd	r24, Y+51	; 0x33
    11dc:	9c a9       	ldd	r25, Y+52	; 0x34
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	40 e8       	ldi	r20, 0x80	; 128
    11e4:	5f e3       	ldi	r21, 0x3F	; 63
    11e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11ea:	88 23       	and	r24, r24
    11ec:	2c f4       	brge	.+10     	; 0x11f8 <LCD_sendCommand+0x49e>
		__ticks = 1;
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	98 ab       	std	Y+48, r25	; 0x30
    11f4:	8f a7       	std	Y+47, r24	; 0x2f
    11f6:	3f c0       	rjmp	.+126    	; 0x1276 <LCD_sendCommand+0x51c>
	else if (__tmp > 65535)
    11f8:	69 a9       	ldd	r22, Y+49	; 0x31
    11fa:	7a a9       	ldd	r23, Y+50	; 0x32
    11fc:	8b a9       	ldd	r24, Y+51	; 0x33
    11fe:	9c a9       	ldd	r25, Y+52	; 0x34
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	3f ef       	ldi	r19, 0xFF	; 255
    1204:	4f e7       	ldi	r20, 0x7F	; 127
    1206:	57 e4       	ldi	r21, 0x47	; 71
    1208:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    120c:	18 16       	cp	r1, r24
    120e:	4c f5       	brge	.+82     	; 0x1262 <LCD_sendCommand+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1210:	6d a9       	ldd	r22, Y+53	; 0x35
    1212:	7e a9       	ldd	r23, Y+54	; 0x36
    1214:	8f a9       	ldd	r24, Y+55	; 0x37
    1216:	98 ad       	ldd	r25, Y+56	; 0x38
    1218:	20 e0       	ldi	r18, 0x00	; 0
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	40 e2       	ldi	r20, 0x20	; 32
    121e:	51 e4       	ldi	r21, 0x41	; 65
    1220:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1224:	dc 01       	movw	r26, r24
    1226:	cb 01       	movw	r24, r22
    1228:	bc 01       	movw	r22, r24
    122a:	cd 01       	movw	r24, r26
    122c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1230:	dc 01       	movw	r26, r24
    1232:	cb 01       	movw	r24, r22
    1234:	98 ab       	std	Y+48, r25	; 0x30
    1236:	8f a7       	std	Y+47, r24	; 0x2f
    1238:	0f c0       	rjmp	.+30     	; 0x1258 <LCD_sendCommand+0x4fe>
    123a:	89 e1       	ldi	r24, 0x19	; 25
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	9e a7       	std	Y+46, r25	; 0x2e
    1240:	8d a7       	std	Y+45, r24	; 0x2d
    1242:	8d a5       	ldd	r24, Y+45	; 0x2d
    1244:	9e a5       	ldd	r25, Y+46	; 0x2e
    1246:	01 97       	sbiw	r24, 0x01	; 1
    1248:	f1 f7       	brne	.-4      	; 0x1246 <LCD_sendCommand+0x4ec>
    124a:	9e a7       	std	Y+46, r25	; 0x2e
    124c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    124e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1250:	98 a9       	ldd	r25, Y+48	; 0x30
    1252:	01 97       	sbiw	r24, 0x01	; 1
    1254:	98 ab       	std	Y+48, r25	; 0x30
    1256:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1258:	8f a5       	ldd	r24, Y+47	; 0x2f
    125a:	98 a9       	ldd	r25, Y+48	; 0x30
    125c:	00 97       	sbiw	r24, 0x00	; 0
    125e:	69 f7       	brne	.-38     	; 0x123a <LCD_sendCommand+0x4e0>
    1260:	14 c0       	rjmp	.+40     	; 0x128a <LCD_sendCommand+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1262:	69 a9       	ldd	r22, Y+49	; 0x31
    1264:	7a a9       	ldd	r23, Y+50	; 0x32
    1266:	8b a9       	ldd	r24, Y+51	; 0x33
    1268:	9c a9       	ldd	r25, Y+52	; 0x34
    126a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    126e:	dc 01       	movw	r26, r24
    1270:	cb 01       	movw	r24, r22
    1272:	98 ab       	std	Y+48, r25	; 0x30
    1274:	8f a7       	std	Y+47, r24	; 0x2f
    1276:	8f a5       	ldd	r24, Y+47	; 0x2f
    1278:	98 a9       	ldd	r25, Y+48	; 0x30
    127a:	9c a7       	std	Y+44, r25	; 0x2c
    127c:	8b a7       	std	Y+43, r24	; 0x2b
    127e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1280:	9c a5       	ldd	r25, Y+44	; 0x2c
    1282:	01 97       	sbiw	r24, 0x01	; 1
    1284:	f1 f7       	brne	.-4      	; 0x1282 <LCD_sendCommand+0x528>
    1286:	9c a7       	std	Y+44, r25	; 0x2c
    1288:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    128a:	a2 e3       	ldi	r26, 0x32	; 50
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	e2 e3       	ldi	r30, 0x32	; 50
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	80 64       	ori	r24, 0x40	; 64
    1296:	8c 93       	st	X, r24
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	a0 e8       	ldi	r26, 0x80	; 128
    129e:	bf e3       	ldi	r27, 0x3F	; 63
    12a0:	8f a3       	std	Y+39, r24	; 0x27
    12a2:	98 a7       	std	Y+40, r25	; 0x28
    12a4:	a9 a7       	std	Y+41, r26	; 0x29
    12a6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12a8:	6f a1       	ldd	r22, Y+39	; 0x27
    12aa:	78 a5       	ldd	r23, Y+40	; 0x28
    12ac:	89 a5       	ldd	r24, Y+41	; 0x29
    12ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	4a e7       	ldi	r20, 0x7A	; 122
    12b6:	53 e4       	ldi	r21, 0x43	; 67
    12b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12bc:	dc 01       	movw	r26, r24
    12be:	cb 01       	movw	r24, r22
    12c0:	8b a3       	std	Y+35, r24	; 0x23
    12c2:	9c a3       	std	Y+36, r25	; 0x24
    12c4:	ad a3       	std	Y+37, r26	; 0x25
    12c6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12c8:	6b a1       	ldd	r22, Y+35	; 0x23
    12ca:	7c a1       	ldd	r23, Y+36	; 0x24
    12cc:	8d a1       	ldd	r24, Y+37	; 0x25
    12ce:	9e a1       	ldd	r25, Y+38	; 0x26
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	40 e8       	ldi	r20, 0x80	; 128
    12d6:	5f e3       	ldi	r21, 0x3F	; 63
    12d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12dc:	88 23       	and	r24, r24
    12de:	2c f4       	brge	.+10     	; 0x12ea <LCD_sendCommand+0x590>
		__ticks = 1;
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	9a a3       	std	Y+34, r25	; 0x22
    12e6:	89 a3       	std	Y+33, r24	; 0x21
    12e8:	3f c0       	rjmp	.+126    	; 0x1368 <LCD_sendCommand+0x60e>
	else if (__tmp > 65535)
    12ea:	6b a1       	ldd	r22, Y+35	; 0x23
    12ec:	7c a1       	ldd	r23, Y+36	; 0x24
    12ee:	8d a1       	ldd	r24, Y+37	; 0x25
    12f0:	9e a1       	ldd	r25, Y+38	; 0x26
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	3f ef       	ldi	r19, 0xFF	; 255
    12f6:	4f e7       	ldi	r20, 0x7F	; 127
    12f8:	57 e4       	ldi	r21, 0x47	; 71
    12fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12fe:	18 16       	cp	r1, r24
    1300:	4c f5       	brge	.+82     	; 0x1354 <LCD_sendCommand+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1302:	6f a1       	ldd	r22, Y+39	; 0x27
    1304:	78 a5       	ldd	r23, Y+40	; 0x28
    1306:	89 a5       	ldd	r24, Y+41	; 0x29
    1308:	9a a5       	ldd	r25, Y+42	; 0x2a
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	40 e2       	ldi	r20, 0x20	; 32
    1310:	51 e4       	ldi	r21, 0x41	; 65
    1312:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1316:	dc 01       	movw	r26, r24
    1318:	cb 01       	movw	r24, r22
    131a:	bc 01       	movw	r22, r24
    131c:	cd 01       	movw	r24, r26
    131e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1322:	dc 01       	movw	r26, r24
    1324:	cb 01       	movw	r24, r22
    1326:	9a a3       	std	Y+34, r25	; 0x22
    1328:	89 a3       	std	Y+33, r24	; 0x21
    132a:	0f c0       	rjmp	.+30     	; 0x134a <LCD_sendCommand+0x5f0>
    132c:	89 e1       	ldi	r24, 0x19	; 25
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	98 a3       	std	Y+32, r25	; 0x20
    1332:	8f 8f       	std	Y+31, r24	; 0x1f
    1334:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1336:	98 a1       	ldd	r25, Y+32	; 0x20
    1338:	01 97       	sbiw	r24, 0x01	; 1
    133a:	f1 f7       	brne	.-4      	; 0x1338 <LCD_sendCommand+0x5de>
    133c:	98 a3       	std	Y+32, r25	; 0x20
    133e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1340:	89 a1       	ldd	r24, Y+33	; 0x21
    1342:	9a a1       	ldd	r25, Y+34	; 0x22
    1344:	01 97       	sbiw	r24, 0x01	; 1
    1346:	9a a3       	std	Y+34, r25	; 0x22
    1348:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    134a:	89 a1       	ldd	r24, Y+33	; 0x21
    134c:	9a a1       	ldd	r25, Y+34	; 0x22
    134e:	00 97       	sbiw	r24, 0x00	; 0
    1350:	69 f7       	brne	.-38     	; 0x132c <LCD_sendCommand+0x5d2>
    1352:	14 c0       	rjmp	.+40     	; 0x137c <LCD_sendCommand+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1354:	6b a1       	ldd	r22, Y+35	; 0x23
    1356:	7c a1       	ldd	r23, Y+36	; 0x24
    1358:	8d a1       	ldd	r24, Y+37	; 0x25
    135a:	9e a1       	ldd	r25, Y+38	; 0x26
    135c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1360:	dc 01       	movw	r26, r24
    1362:	cb 01       	movw	r24, r22
    1364:	9a a3       	std	Y+34, r25	; 0x22
    1366:	89 a3       	std	Y+33, r24	; 0x21
    1368:	89 a1       	ldd	r24, Y+33	; 0x21
    136a:	9a a1       	ldd	r25, Y+34	; 0x22
    136c:	9e 8f       	std	Y+30, r25	; 0x1e
    136e:	8d 8f       	std	Y+29, r24	; 0x1d
    1370:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1372:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1374:	01 97       	sbiw	r24, 0x01	; 1
    1376:	f1 f7       	brne	.-4      	; 0x1374 <LCD_sendCommand+0x61a>
    1378:	9e 8f       	std	Y+30, r25	; 0x1e
    137a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
    137c:	a5 e3       	ldi	r26, 0x35	; 53
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	e5 e3       	ldi	r30, 0x35	; 53
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	28 2f       	mov	r18, r24
    1388:	2f 70       	andi	r18, 0x0F	; 15
    138a:	fe 01       	movw	r30, r28
    138c:	ed 59       	subi	r30, 0x9D	; 157
    138e:	ff 4f       	sbci	r31, 0xFF	; 255
    1390:	80 81       	ld	r24, Z
    1392:	88 2f       	mov	r24, r24
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	82 95       	swap	r24
    1398:	92 95       	swap	r25
    139a:	90 7f       	andi	r25, 0xF0	; 240
    139c:	98 27       	eor	r25, r24
    139e:	80 7f       	andi	r24, 0xF0	; 240
    13a0:	98 27       	eor	r25, r24
    13a2:	82 2b       	or	r24, r18
    13a4:	8c 93       	st	X, r24
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	a0 e8       	ldi	r26, 0x80	; 128
    13ac:	bf e3       	ldi	r27, 0x3F	; 63
    13ae:	89 8f       	std	Y+25, r24	; 0x19
    13b0:	9a 8f       	std	Y+26, r25	; 0x1a
    13b2:	ab 8f       	std	Y+27, r26	; 0x1b
    13b4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13b6:	69 8d       	ldd	r22, Y+25	; 0x19
    13b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13be:	20 e0       	ldi	r18, 0x00	; 0
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	4a e7       	ldi	r20, 0x7A	; 122
    13c4:	53 e4       	ldi	r21, 0x43	; 67
    13c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ca:	dc 01       	movw	r26, r24
    13cc:	cb 01       	movw	r24, r22
    13ce:	8d 8b       	std	Y+21, r24	; 0x15
    13d0:	9e 8b       	std	Y+22, r25	; 0x16
    13d2:	af 8b       	std	Y+23, r26	; 0x17
    13d4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13d6:	6d 89       	ldd	r22, Y+21	; 0x15
    13d8:	7e 89       	ldd	r23, Y+22	; 0x16
    13da:	8f 89       	ldd	r24, Y+23	; 0x17
    13dc:	98 8d       	ldd	r25, Y+24	; 0x18
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	40 e8       	ldi	r20, 0x80	; 128
    13e4:	5f e3       	ldi	r21, 0x3F	; 63
    13e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13ea:	88 23       	and	r24, r24
    13ec:	2c f4       	brge	.+10     	; 0x13f8 <LCD_sendCommand+0x69e>
		__ticks = 1;
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	9c 8b       	std	Y+20, r25	; 0x14
    13f4:	8b 8b       	std	Y+19, r24	; 0x13
    13f6:	3f c0       	rjmp	.+126    	; 0x1476 <LCD_sendCommand+0x71c>
	else if (__tmp > 65535)
    13f8:	6d 89       	ldd	r22, Y+21	; 0x15
    13fa:	7e 89       	ldd	r23, Y+22	; 0x16
    13fc:	8f 89       	ldd	r24, Y+23	; 0x17
    13fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	3f ef       	ldi	r19, 0xFF	; 255
    1404:	4f e7       	ldi	r20, 0x7F	; 127
    1406:	57 e4       	ldi	r21, 0x47	; 71
    1408:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    140c:	18 16       	cp	r1, r24
    140e:	4c f5       	brge	.+82     	; 0x1462 <LCD_sendCommand+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1410:	69 8d       	ldd	r22, Y+25	; 0x19
    1412:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1414:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1416:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1418:	20 e0       	ldi	r18, 0x00	; 0
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	40 e2       	ldi	r20, 0x20	; 32
    141e:	51 e4       	ldi	r21, 0x41	; 65
    1420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1424:	dc 01       	movw	r26, r24
    1426:	cb 01       	movw	r24, r22
    1428:	bc 01       	movw	r22, r24
    142a:	cd 01       	movw	r24, r26
    142c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1430:	dc 01       	movw	r26, r24
    1432:	cb 01       	movw	r24, r22
    1434:	9c 8b       	std	Y+20, r25	; 0x14
    1436:	8b 8b       	std	Y+19, r24	; 0x13
    1438:	0f c0       	rjmp	.+30     	; 0x1458 <LCD_sendCommand+0x6fe>
    143a:	89 e1       	ldi	r24, 0x19	; 25
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	9a 8b       	std	Y+18, r25	; 0x12
    1440:	89 8b       	std	Y+17, r24	; 0x11
    1442:	89 89       	ldd	r24, Y+17	; 0x11
    1444:	9a 89       	ldd	r25, Y+18	; 0x12
    1446:	01 97       	sbiw	r24, 0x01	; 1
    1448:	f1 f7       	brne	.-4      	; 0x1446 <LCD_sendCommand+0x6ec>
    144a:	9a 8b       	std	Y+18, r25	; 0x12
    144c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    144e:	8b 89       	ldd	r24, Y+19	; 0x13
    1450:	9c 89       	ldd	r25, Y+20	; 0x14
    1452:	01 97       	sbiw	r24, 0x01	; 1
    1454:	9c 8b       	std	Y+20, r25	; 0x14
    1456:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1458:	8b 89       	ldd	r24, Y+19	; 0x13
    145a:	9c 89       	ldd	r25, Y+20	; 0x14
    145c:	00 97       	sbiw	r24, 0x00	; 0
    145e:	69 f7       	brne	.-38     	; 0x143a <LCD_sendCommand+0x6e0>
    1460:	14 c0       	rjmp	.+40     	; 0x148a <LCD_sendCommand+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1462:	6d 89       	ldd	r22, Y+21	; 0x15
    1464:	7e 89       	ldd	r23, Y+22	; 0x16
    1466:	8f 89       	ldd	r24, Y+23	; 0x17
    1468:	98 8d       	ldd	r25, Y+24	; 0x18
    146a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22
    1472:	9c 8b       	std	Y+20, r25	; 0x14
    1474:	8b 8b       	std	Y+19, r24	; 0x13
    1476:	8b 89       	ldd	r24, Y+19	; 0x13
    1478:	9c 89       	ldd	r25, Y+20	; 0x14
    147a:	98 8b       	std	Y+16, r25	; 0x10
    147c:	8f 87       	std	Y+15, r24	; 0x0f
    147e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1480:	98 89       	ldd	r25, Y+16	; 0x10
    1482:	01 97       	sbiw	r24, 0x01	; 1
    1484:	f1 f7       	brne	.-4      	; 0x1482 <LCD_sendCommand+0x728>
    1486:	98 8b       	std	Y+16, r25	; 0x10
    1488:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    148a:	a2 e3       	ldi	r26, 0x32	; 50
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	e2 e3       	ldi	r30, 0x32	; 50
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	8f 7b       	andi	r24, 0xBF	; 191
    1496:	8c 93       	st	X, r24
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	a0 e8       	ldi	r26, 0x80	; 128
    149e:	bf e3       	ldi	r27, 0x3F	; 63
    14a0:	8b 87       	std	Y+11, r24	; 0x0b
    14a2:	9c 87       	std	Y+12, r25	; 0x0c
    14a4:	ad 87       	std	Y+13, r26	; 0x0d
    14a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    14aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    14ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    14b0:	20 e0       	ldi	r18, 0x00	; 0
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	4a e7       	ldi	r20, 0x7A	; 122
    14b6:	53 e4       	ldi	r21, 0x43	; 67
    14b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14bc:	dc 01       	movw	r26, r24
    14be:	cb 01       	movw	r24, r22
    14c0:	8f 83       	std	Y+7, r24	; 0x07
    14c2:	98 87       	std	Y+8, r25	; 0x08
    14c4:	a9 87       	std	Y+9, r26	; 0x09
    14c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14c8:	6f 81       	ldd	r22, Y+7	; 0x07
    14ca:	78 85       	ldd	r23, Y+8	; 0x08
    14cc:	89 85       	ldd	r24, Y+9	; 0x09
    14ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d0:	20 e0       	ldi	r18, 0x00	; 0
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	40 e8       	ldi	r20, 0x80	; 128
    14d6:	5f e3       	ldi	r21, 0x3F	; 63
    14d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14dc:	88 23       	and	r24, r24
    14de:	2c f4       	brge	.+10     	; 0x14ea <LCD_sendCommand+0x790>
		__ticks = 1;
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	9e 83       	std	Y+6, r25	; 0x06
    14e6:	8d 83       	std	Y+5, r24	; 0x05
    14e8:	3f c0       	rjmp	.+126    	; 0x1568 <LCD_sendCommand+0x80e>
	else if (__tmp > 65535)
    14ea:	6f 81       	ldd	r22, Y+7	; 0x07
    14ec:	78 85       	ldd	r23, Y+8	; 0x08
    14ee:	89 85       	ldd	r24, Y+9	; 0x09
    14f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f2:	20 e0       	ldi	r18, 0x00	; 0
    14f4:	3f ef       	ldi	r19, 0xFF	; 255
    14f6:	4f e7       	ldi	r20, 0x7F	; 127
    14f8:	57 e4       	ldi	r21, 0x47	; 71
    14fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14fe:	18 16       	cp	r1, r24
    1500:	4c f5       	brge	.+82     	; 0x1554 <LCD_sendCommand+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1502:	6b 85       	ldd	r22, Y+11	; 0x0b
    1504:	7c 85       	ldd	r23, Y+12	; 0x0c
    1506:	8d 85       	ldd	r24, Y+13	; 0x0d
    1508:	9e 85       	ldd	r25, Y+14	; 0x0e
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	40 e2       	ldi	r20, 0x20	; 32
    1510:	51 e4       	ldi	r21, 0x41	; 65
    1512:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1516:	dc 01       	movw	r26, r24
    1518:	cb 01       	movw	r24, r22
    151a:	bc 01       	movw	r22, r24
    151c:	cd 01       	movw	r24, r26
    151e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1522:	dc 01       	movw	r26, r24
    1524:	cb 01       	movw	r24, r22
    1526:	9e 83       	std	Y+6, r25	; 0x06
    1528:	8d 83       	std	Y+5, r24	; 0x05
    152a:	0f c0       	rjmp	.+30     	; 0x154a <LCD_sendCommand+0x7f0>
    152c:	89 e1       	ldi	r24, 0x19	; 25
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	9c 83       	std	Y+4, r25	; 0x04
    1532:	8b 83       	std	Y+3, r24	; 0x03
    1534:	8b 81       	ldd	r24, Y+3	; 0x03
    1536:	9c 81       	ldd	r25, Y+4	; 0x04
    1538:	01 97       	sbiw	r24, 0x01	; 1
    153a:	f1 f7       	brne	.-4      	; 0x1538 <LCD_sendCommand+0x7de>
    153c:	9c 83       	std	Y+4, r25	; 0x04
    153e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1540:	8d 81       	ldd	r24, Y+5	; 0x05
    1542:	9e 81       	ldd	r25, Y+6	; 0x06
    1544:	01 97       	sbiw	r24, 0x01	; 1
    1546:	9e 83       	std	Y+6, r25	; 0x06
    1548:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    154a:	8d 81       	ldd	r24, Y+5	; 0x05
    154c:	9e 81       	ldd	r25, Y+6	; 0x06
    154e:	00 97       	sbiw	r24, 0x00	; 0
    1550:	69 f7       	brne	.-38     	; 0x152c <LCD_sendCommand+0x7d2>
    1552:	14 c0       	rjmp	.+40     	; 0x157c <LCD_sendCommand+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1554:	6f 81       	ldd	r22, Y+7	; 0x07
    1556:	78 85       	ldd	r23, Y+8	; 0x08
    1558:	89 85       	ldd	r24, Y+9	; 0x09
    155a:	9a 85       	ldd	r25, Y+10	; 0x0a
    155c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1560:	dc 01       	movw	r26, r24
    1562:	cb 01       	movw	r24, r22
    1564:	9e 83       	std	Y+6, r25	; 0x06
    1566:	8d 83       	std	Y+5, r24	; 0x05
    1568:	8d 81       	ldd	r24, Y+5	; 0x05
    156a:	9e 81       	ldd	r25, Y+6	; 0x06
    156c:	9a 83       	std	Y+2, r25	; 0x02
    156e:	89 83       	std	Y+1, r24	; 0x01
    1570:	89 81       	ldd	r24, Y+1	; 0x01
    1572:	9a 81       	ldd	r25, Y+2	; 0x02
    1574:	01 97       	sbiw	r24, 0x01	; 1
    1576:	f1 f7       	brne	.-4      	; 0x1574 <LCD_sendCommand+0x81a>
    1578:	9a 83       	std	Y+2, r25	; 0x02
    157a:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    157c:	cd 59       	subi	r28, 0x9D	; 157
    157e:	df 4f       	sbci	r29, 0xFF	; 255
    1580:	0f b6       	in	r0, 0x3f	; 63
    1582:	f8 94       	cli
    1584:	de bf       	out	0x3e, r29	; 62
    1586:	0f be       	out	0x3f, r0	; 63
    1588:	cd bf       	out	0x3d, r28	; 61
    158a:	cf 91       	pop	r28
    158c:	df 91       	pop	r29
    158e:	1f 91       	pop	r17
    1590:	0f 91       	pop	r16
    1592:	08 95       	ret

00001594 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1594:	0f 93       	push	r16
    1596:	1f 93       	push	r17
    1598:	df 93       	push	r29
    159a:	cf 93       	push	r28
    159c:	cd b7       	in	r28, 0x3d	; 61
    159e:	de b7       	in	r29, 0x3e	; 62
    15a0:	c3 56       	subi	r28, 0x63	; 99
    15a2:	d0 40       	sbci	r29, 0x00	; 0
    15a4:	0f b6       	in	r0, 0x3f	; 63
    15a6:	f8 94       	cli
    15a8:	de bf       	out	0x3e, r29	; 62
    15aa:	0f be       	out	0x3f, r0	; 63
    15ac:	cd bf       	out	0x3d, r28	; 61
    15ae:	fe 01       	movw	r30, r28
    15b0:	ed 59       	subi	r30, 0x9D	; 157
    15b2:	ff 4f       	sbci	r31, 0xFF	; 255
    15b4:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    15b6:	a2 e3       	ldi	r26, 0x32	; 50
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	e2 e3       	ldi	r30, 0x32	; 50
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	80 61       	ori	r24, 0x10	; 16
    15c2:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    15c4:	a2 e3       	ldi	r26, 0x32	; 50
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	e2 e3       	ldi	r30, 0x32	; 50
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	8f 7d       	andi	r24, 0xDF	; 223
    15d0:	8c 93       	st	X, r24
    15d2:	fe 01       	movw	r30, r28
    15d4:	e1 5a       	subi	r30, 0xA1	; 161
    15d6:	ff 4f       	sbci	r31, 0xFF	; 255
    15d8:	80 e0       	ldi	r24, 0x00	; 0
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	a0 e8       	ldi	r26, 0x80	; 128
    15de:	bf e3       	ldi	r27, 0x3F	; 63
    15e0:	80 83       	st	Z, r24
    15e2:	91 83       	std	Z+1, r25	; 0x01
    15e4:	a2 83       	std	Z+2, r26	; 0x02
    15e6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15e8:	8e 01       	movw	r16, r28
    15ea:	05 5a       	subi	r16, 0xA5	; 165
    15ec:	1f 4f       	sbci	r17, 0xFF	; 255
    15ee:	fe 01       	movw	r30, r28
    15f0:	e1 5a       	subi	r30, 0xA1	; 161
    15f2:	ff 4f       	sbci	r31, 0xFF	; 255
    15f4:	60 81       	ld	r22, Z
    15f6:	71 81       	ldd	r23, Z+1	; 0x01
    15f8:	82 81       	ldd	r24, Z+2	; 0x02
    15fa:	93 81       	ldd	r25, Z+3	; 0x03
    15fc:	20 e0       	ldi	r18, 0x00	; 0
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	4a e7       	ldi	r20, 0x7A	; 122
    1602:	53 e4       	ldi	r21, 0x43	; 67
    1604:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1608:	dc 01       	movw	r26, r24
    160a:	cb 01       	movw	r24, r22
    160c:	f8 01       	movw	r30, r16
    160e:	80 83       	st	Z, r24
    1610:	91 83       	std	Z+1, r25	; 0x01
    1612:	a2 83       	std	Z+2, r26	; 0x02
    1614:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1616:	fe 01       	movw	r30, r28
    1618:	e5 5a       	subi	r30, 0xA5	; 165
    161a:	ff 4f       	sbci	r31, 0xFF	; 255
    161c:	60 81       	ld	r22, Z
    161e:	71 81       	ldd	r23, Z+1	; 0x01
    1620:	82 81       	ldd	r24, Z+2	; 0x02
    1622:	93 81       	ldd	r25, Z+3	; 0x03
    1624:	20 e0       	ldi	r18, 0x00	; 0
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	40 e8       	ldi	r20, 0x80	; 128
    162a:	5f e3       	ldi	r21, 0x3F	; 63
    162c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1630:	88 23       	and	r24, r24
    1632:	44 f4       	brge	.+16     	; 0x1644 <LCD_displayCharacter+0xb0>
		__ticks = 1;
    1634:	fe 01       	movw	r30, r28
    1636:	e7 5a       	subi	r30, 0xA7	; 167
    1638:	ff 4f       	sbci	r31, 0xFF	; 255
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	91 83       	std	Z+1, r25	; 0x01
    1640:	80 83       	st	Z, r24
    1642:	64 c0       	rjmp	.+200    	; 0x170c <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    1644:	fe 01       	movw	r30, r28
    1646:	e5 5a       	subi	r30, 0xA5	; 165
    1648:	ff 4f       	sbci	r31, 0xFF	; 255
    164a:	60 81       	ld	r22, Z
    164c:	71 81       	ldd	r23, Z+1	; 0x01
    164e:	82 81       	ldd	r24, Z+2	; 0x02
    1650:	93 81       	ldd	r25, Z+3	; 0x03
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	3f ef       	ldi	r19, 0xFF	; 255
    1656:	4f e7       	ldi	r20, 0x7F	; 127
    1658:	57 e4       	ldi	r21, 0x47	; 71
    165a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    165e:	18 16       	cp	r1, r24
    1660:	0c f0       	brlt	.+2      	; 0x1664 <LCD_displayCharacter+0xd0>
    1662:	43 c0       	rjmp	.+134    	; 0x16ea <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1664:	fe 01       	movw	r30, r28
    1666:	e1 5a       	subi	r30, 0xA1	; 161
    1668:	ff 4f       	sbci	r31, 0xFF	; 255
    166a:	60 81       	ld	r22, Z
    166c:	71 81       	ldd	r23, Z+1	; 0x01
    166e:	82 81       	ldd	r24, Z+2	; 0x02
    1670:	93 81       	ldd	r25, Z+3	; 0x03
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	40 e2       	ldi	r20, 0x20	; 32
    1678:	51 e4       	ldi	r21, 0x41	; 65
    167a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    167e:	dc 01       	movw	r26, r24
    1680:	cb 01       	movw	r24, r22
    1682:	8e 01       	movw	r16, r28
    1684:	07 5a       	subi	r16, 0xA7	; 167
    1686:	1f 4f       	sbci	r17, 0xFF	; 255
    1688:	bc 01       	movw	r22, r24
    168a:	cd 01       	movw	r24, r26
    168c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	f8 01       	movw	r30, r16
    1696:	91 83       	std	Z+1, r25	; 0x01
    1698:	80 83       	st	Z, r24
    169a:	1f c0       	rjmp	.+62     	; 0x16da <LCD_displayCharacter+0x146>
    169c:	fe 01       	movw	r30, r28
    169e:	e9 5a       	subi	r30, 0xA9	; 169
    16a0:	ff 4f       	sbci	r31, 0xFF	; 255
    16a2:	89 e1       	ldi	r24, 0x19	; 25
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	91 83       	std	Z+1, r25	; 0x01
    16a8:	80 83       	st	Z, r24
    16aa:	fe 01       	movw	r30, r28
    16ac:	e9 5a       	subi	r30, 0xA9	; 169
    16ae:	ff 4f       	sbci	r31, 0xFF	; 255
    16b0:	80 81       	ld	r24, Z
    16b2:	91 81       	ldd	r25, Z+1	; 0x01
    16b4:	01 97       	sbiw	r24, 0x01	; 1
    16b6:	f1 f7       	brne	.-4      	; 0x16b4 <LCD_displayCharacter+0x120>
    16b8:	fe 01       	movw	r30, r28
    16ba:	e9 5a       	subi	r30, 0xA9	; 169
    16bc:	ff 4f       	sbci	r31, 0xFF	; 255
    16be:	91 83       	std	Z+1, r25	; 0x01
    16c0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c2:	de 01       	movw	r26, r28
    16c4:	a7 5a       	subi	r26, 0xA7	; 167
    16c6:	bf 4f       	sbci	r27, 0xFF	; 255
    16c8:	fe 01       	movw	r30, r28
    16ca:	e7 5a       	subi	r30, 0xA7	; 167
    16cc:	ff 4f       	sbci	r31, 0xFF	; 255
    16ce:	80 81       	ld	r24, Z
    16d0:	91 81       	ldd	r25, Z+1	; 0x01
    16d2:	01 97       	sbiw	r24, 0x01	; 1
    16d4:	11 96       	adiw	r26, 0x01	; 1
    16d6:	9c 93       	st	X, r25
    16d8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16da:	fe 01       	movw	r30, r28
    16dc:	e7 5a       	subi	r30, 0xA7	; 167
    16de:	ff 4f       	sbci	r31, 0xFF	; 255
    16e0:	80 81       	ld	r24, Z
    16e2:	91 81       	ldd	r25, Z+1	; 0x01
    16e4:	00 97       	sbiw	r24, 0x00	; 0
    16e6:	d1 f6       	brne	.-76     	; 0x169c <LCD_displayCharacter+0x108>
    16e8:	27 c0       	rjmp	.+78     	; 0x1738 <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ea:	8e 01       	movw	r16, r28
    16ec:	07 5a       	subi	r16, 0xA7	; 167
    16ee:	1f 4f       	sbci	r17, 0xFF	; 255
    16f0:	fe 01       	movw	r30, r28
    16f2:	e5 5a       	subi	r30, 0xA5	; 165
    16f4:	ff 4f       	sbci	r31, 0xFF	; 255
    16f6:	60 81       	ld	r22, Z
    16f8:	71 81       	ldd	r23, Z+1	; 0x01
    16fa:	82 81       	ldd	r24, Z+2	; 0x02
    16fc:	93 81       	ldd	r25, Z+3	; 0x03
    16fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	f8 01       	movw	r30, r16
    1708:	91 83       	std	Z+1, r25	; 0x01
    170a:	80 83       	st	Z, r24
    170c:	de 01       	movw	r26, r28
    170e:	ab 5a       	subi	r26, 0xAB	; 171
    1710:	bf 4f       	sbci	r27, 0xFF	; 255
    1712:	fe 01       	movw	r30, r28
    1714:	e7 5a       	subi	r30, 0xA7	; 167
    1716:	ff 4f       	sbci	r31, 0xFF	; 255
    1718:	80 81       	ld	r24, Z
    171a:	91 81       	ldd	r25, Z+1	; 0x01
    171c:	8d 93       	st	X+, r24
    171e:	9c 93       	st	X, r25
    1720:	fe 01       	movw	r30, r28
    1722:	eb 5a       	subi	r30, 0xAB	; 171
    1724:	ff 4f       	sbci	r31, 0xFF	; 255
    1726:	80 81       	ld	r24, Z
    1728:	91 81       	ldd	r25, Z+1	; 0x01
    172a:	01 97       	sbiw	r24, 0x01	; 1
    172c:	f1 f7       	brne	.-4      	; 0x172a <LCD_displayCharacter+0x196>
    172e:	fe 01       	movw	r30, r28
    1730:	eb 5a       	subi	r30, 0xAB	; 171
    1732:	ff 4f       	sbci	r31, 0xFF	; 255
    1734:	91 83       	std	Z+1, r25	; 0x01
    1736:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1738:	a2 e3       	ldi	r26, 0x32	; 50
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	e2 e3       	ldi	r30, 0x32	; 50
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	80 64       	ori	r24, 0x40	; 64
    1744:	8c 93       	st	X, r24
    1746:	fe 01       	movw	r30, r28
    1748:	ef 5a       	subi	r30, 0xAF	; 175
    174a:	ff 4f       	sbci	r31, 0xFF	; 255
    174c:	80 e0       	ldi	r24, 0x00	; 0
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	a0 e8       	ldi	r26, 0x80	; 128
    1752:	bf e3       	ldi	r27, 0x3F	; 63
    1754:	80 83       	st	Z, r24
    1756:	91 83       	std	Z+1, r25	; 0x01
    1758:	a2 83       	std	Z+2, r26	; 0x02
    175a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    175c:	8e 01       	movw	r16, r28
    175e:	03 5b       	subi	r16, 0xB3	; 179
    1760:	1f 4f       	sbci	r17, 0xFF	; 255
    1762:	fe 01       	movw	r30, r28
    1764:	ef 5a       	subi	r30, 0xAF	; 175
    1766:	ff 4f       	sbci	r31, 0xFF	; 255
    1768:	60 81       	ld	r22, Z
    176a:	71 81       	ldd	r23, Z+1	; 0x01
    176c:	82 81       	ldd	r24, Z+2	; 0x02
    176e:	93 81       	ldd	r25, Z+3	; 0x03
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	4a e7       	ldi	r20, 0x7A	; 122
    1776:	53 e4       	ldi	r21, 0x43	; 67
    1778:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    177c:	dc 01       	movw	r26, r24
    177e:	cb 01       	movw	r24, r22
    1780:	f8 01       	movw	r30, r16
    1782:	80 83       	st	Z, r24
    1784:	91 83       	std	Z+1, r25	; 0x01
    1786:	a2 83       	std	Z+2, r26	; 0x02
    1788:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    178a:	fe 01       	movw	r30, r28
    178c:	e3 5b       	subi	r30, 0xB3	; 179
    178e:	ff 4f       	sbci	r31, 0xFF	; 255
    1790:	60 81       	ld	r22, Z
    1792:	71 81       	ldd	r23, Z+1	; 0x01
    1794:	82 81       	ldd	r24, Z+2	; 0x02
    1796:	93 81       	ldd	r25, Z+3	; 0x03
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	40 e8       	ldi	r20, 0x80	; 128
    179e:	5f e3       	ldi	r21, 0x3F	; 63
    17a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17a4:	88 23       	and	r24, r24
    17a6:	44 f4       	brge	.+16     	; 0x17b8 <LCD_displayCharacter+0x224>
		__ticks = 1;
    17a8:	fe 01       	movw	r30, r28
    17aa:	e5 5b       	subi	r30, 0xB5	; 181
    17ac:	ff 4f       	sbci	r31, 0xFF	; 255
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	91 83       	std	Z+1, r25	; 0x01
    17b4:	80 83       	st	Z, r24
    17b6:	64 c0       	rjmp	.+200    	; 0x1880 <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    17b8:	fe 01       	movw	r30, r28
    17ba:	e3 5b       	subi	r30, 0xB3	; 179
    17bc:	ff 4f       	sbci	r31, 0xFF	; 255
    17be:	60 81       	ld	r22, Z
    17c0:	71 81       	ldd	r23, Z+1	; 0x01
    17c2:	82 81       	ldd	r24, Z+2	; 0x02
    17c4:	93 81       	ldd	r25, Z+3	; 0x03
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	3f ef       	ldi	r19, 0xFF	; 255
    17ca:	4f e7       	ldi	r20, 0x7F	; 127
    17cc:	57 e4       	ldi	r21, 0x47	; 71
    17ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17d2:	18 16       	cp	r1, r24
    17d4:	0c f0       	brlt	.+2      	; 0x17d8 <LCD_displayCharacter+0x244>
    17d6:	43 c0       	rjmp	.+134    	; 0x185e <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d8:	fe 01       	movw	r30, r28
    17da:	ef 5a       	subi	r30, 0xAF	; 175
    17dc:	ff 4f       	sbci	r31, 0xFF	; 255
    17de:	60 81       	ld	r22, Z
    17e0:	71 81       	ldd	r23, Z+1	; 0x01
    17e2:	82 81       	ldd	r24, Z+2	; 0x02
    17e4:	93 81       	ldd	r25, Z+3	; 0x03
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	40 e2       	ldi	r20, 0x20	; 32
    17ec:	51 e4       	ldi	r21, 0x41	; 65
    17ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f2:	dc 01       	movw	r26, r24
    17f4:	cb 01       	movw	r24, r22
    17f6:	8e 01       	movw	r16, r28
    17f8:	05 5b       	subi	r16, 0xB5	; 181
    17fa:	1f 4f       	sbci	r17, 0xFF	; 255
    17fc:	bc 01       	movw	r22, r24
    17fe:	cd 01       	movw	r24, r26
    1800:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1804:	dc 01       	movw	r26, r24
    1806:	cb 01       	movw	r24, r22
    1808:	f8 01       	movw	r30, r16
    180a:	91 83       	std	Z+1, r25	; 0x01
    180c:	80 83       	st	Z, r24
    180e:	1f c0       	rjmp	.+62     	; 0x184e <LCD_displayCharacter+0x2ba>
    1810:	fe 01       	movw	r30, r28
    1812:	e7 5b       	subi	r30, 0xB7	; 183
    1814:	ff 4f       	sbci	r31, 0xFF	; 255
    1816:	89 e1       	ldi	r24, 0x19	; 25
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	91 83       	std	Z+1, r25	; 0x01
    181c:	80 83       	st	Z, r24
    181e:	fe 01       	movw	r30, r28
    1820:	e7 5b       	subi	r30, 0xB7	; 183
    1822:	ff 4f       	sbci	r31, 0xFF	; 255
    1824:	80 81       	ld	r24, Z
    1826:	91 81       	ldd	r25, Z+1	; 0x01
    1828:	01 97       	sbiw	r24, 0x01	; 1
    182a:	f1 f7       	brne	.-4      	; 0x1828 <LCD_displayCharacter+0x294>
    182c:	fe 01       	movw	r30, r28
    182e:	e7 5b       	subi	r30, 0xB7	; 183
    1830:	ff 4f       	sbci	r31, 0xFF	; 255
    1832:	91 83       	std	Z+1, r25	; 0x01
    1834:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1836:	de 01       	movw	r26, r28
    1838:	a5 5b       	subi	r26, 0xB5	; 181
    183a:	bf 4f       	sbci	r27, 0xFF	; 255
    183c:	fe 01       	movw	r30, r28
    183e:	e5 5b       	subi	r30, 0xB5	; 181
    1840:	ff 4f       	sbci	r31, 0xFF	; 255
    1842:	80 81       	ld	r24, Z
    1844:	91 81       	ldd	r25, Z+1	; 0x01
    1846:	01 97       	sbiw	r24, 0x01	; 1
    1848:	11 96       	adiw	r26, 0x01	; 1
    184a:	9c 93       	st	X, r25
    184c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    184e:	fe 01       	movw	r30, r28
    1850:	e5 5b       	subi	r30, 0xB5	; 181
    1852:	ff 4f       	sbci	r31, 0xFF	; 255
    1854:	80 81       	ld	r24, Z
    1856:	91 81       	ldd	r25, Z+1	; 0x01
    1858:	00 97       	sbiw	r24, 0x00	; 0
    185a:	d1 f6       	brne	.-76     	; 0x1810 <LCD_displayCharacter+0x27c>
    185c:	27 c0       	rjmp	.+78     	; 0x18ac <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    185e:	8e 01       	movw	r16, r28
    1860:	05 5b       	subi	r16, 0xB5	; 181
    1862:	1f 4f       	sbci	r17, 0xFF	; 255
    1864:	fe 01       	movw	r30, r28
    1866:	e3 5b       	subi	r30, 0xB3	; 179
    1868:	ff 4f       	sbci	r31, 0xFF	; 255
    186a:	60 81       	ld	r22, Z
    186c:	71 81       	ldd	r23, Z+1	; 0x01
    186e:	82 81       	ldd	r24, Z+2	; 0x02
    1870:	93 81       	ldd	r25, Z+3	; 0x03
    1872:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	f8 01       	movw	r30, r16
    187c:	91 83       	std	Z+1, r25	; 0x01
    187e:	80 83       	st	Z, r24
    1880:	de 01       	movw	r26, r28
    1882:	a9 5b       	subi	r26, 0xB9	; 185
    1884:	bf 4f       	sbci	r27, 0xFF	; 255
    1886:	fe 01       	movw	r30, r28
    1888:	e5 5b       	subi	r30, 0xB5	; 181
    188a:	ff 4f       	sbci	r31, 0xFF	; 255
    188c:	80 81       	ld	r24, Z
    188e:	91 81       	ldd	r25, Z+1	; 0x01
    1890:	8d 93       	st	X+, r24
    1892:	9c 93       	st	X, r25
    1894:	fe 01       	movw	r30, r28
    1896:	e9 5b       	subi	r30, 0xB9	; 185
    1898:	ff 4f       	sbci	r31, 0xFF	; 255
    189a:	80 81       	ld	r24, Z
    189c:	91 81       	ldd	r25, Z+1	; 0x01
    189e:	01 97       	sbiw	r24, 0x01	; 1
    18a0:	f1 f7       	brne	.-4      	; 0x189e <LCD_displayCharacter+0x30a>
    18a2:	fe 01       	movw	r30, r28
    18a4:	e9 5b       	subi	r30, 0xB9	; 185
    18a6:	ff 4f       	sbci	r31, 0xFF	; 255
    18a8:	91 83       	std	Z+1, r25	; 0x01
    18aa:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
    18ac:	a5 e3       	ldi	r26, 0x35	; 53
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	e5 e3       	ldi	r30, 0x35	; 53
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	98 2f       	mov	r25, r24
    18b8:	9f 70       	andi	r25, 0x0F	; 15
    18ba:	fe 01       	movw	r30, r28
    18bc:	ed 59       	subi	r30, 0x9D	; 157
    18be:	ff 4f       	sbci	r31, 0xFF	; 255
    18c0:	80 81       	ld	r24, Z
    18c2:	80 7f       	andi	r24, 0xF0	; 240
    18c4:	89 2b       	or	r24, r25
    18c6:	8c 93       	st	X, r24
    18c8:	fe 01       	movw	r30, r28
    18ca:	ed 5b       	subi	r30, 0xBD	; 189
    18cc:	ff 4f       	sbci	r31, 0xFF	; 255
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	a0 e8       	ldi	r26, 0x80	; 128
    18d4:	bf e3       	ldi	r27, 0x3F	; 63
    18d6:	80 83       	st	Z, r24
    18d8:	91 83       	std	Z+1, r25	; 0x01
    18da:	a2 83       	std	Z+2, r26	; 0x02
    18dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18de:	8e 01       	movw	r16, r28
    18e0:	01 5c       	subi	r16, 0xC1	; 193
    18e2:	1f 4f       	sbci	r17, 0xFF	; 255
    18e4:	fe 01       	movw	r30, r28
    18e6:	ed 5b       	subi	r30, 0xBD	; 189
    18e8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ea:	60 81       	ld	r22, Z
    18ec:	71 81       	ldd	r23, Z+1	; 0x01
    18ee:	82 81       	ldd	r24, Z+2	; 0x02
    18f0:	93 81       	ldd	r25, Z+3	; 0x03
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	4a e7       	ldi	r20, 0x7A	; 122
    18f8:	53 e4       	ldi	r21, 0x43	; 67
    18fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18fe:	dc 01       	movw	r26, r24
    1900:	cb 01       	movw	r24, r22
    1902:	f8 01       	movw	r30, r16
    1904:	80 83       	st	Z, r24
    1906:	91 83       	std	Z+1, r25	; 0x01
    1908:	a2 83       	std	Z+2, r26	; 0x02
    190a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    190c:	fe 01       	movw	r30, r28
    190e:	ff 96       	adiw	r30, 0x3f	; 63
    1910:	60 81       	ld	r22, Z
    1912:	71 81       	ldd	r23, Z+1	; 0x01
    1914:	82 81       	ldd	r24, Z+2	; 0x02
    1916:	93 81       	ldd	r25, Z+3	; 0x03
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	40 e8       	ldi	r20, 0x80	; 128
    191e:	5f e3       	ldi	r21, 0x3F	; 63
    1920:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1924:	88 23       	and	r24, r24
    1926:	2c f4       	brge	.+10     	; 0x1932 <LCD_displayCharacter+0x39e>
		__ticks = 1;
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	9e af       	std	Y+62, r25	; 0x3e
    192e:	8d af       	std	Y+61, r24	; 0x3d
    1930:	46 c0       	rjmp	.+140    	; 0x19be <LCD_displayCharacter+0x42a>
	else if (__tmp > 65535)
    1932:	fe 01       	movw	r30, r28
    1934:	ff 96       	adiw	r30, 0x3f	; 63
    1936:	60 81       	ld	r22, Z
    1938:	71 81       	ldd	r23, Z+1	; 0x01
    193a:	82 81       	ldd	r24, Z+2	; 0x02
    193c:	93 81       	ldd	r25, Z+3	; 0x03
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	3f ef       	ldi	r19, 0xFF	; 255
    1942:	4f e7       	ldi	r20, 0x7F	; 127
    1944:	57 e4       	ldi	r21, 0x47	; 71
    1946:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    194a:	18 16       	cp	r1, r24
    194c:	64 f5       	brge	.+88     	; 0x19a6 <LCD_displayCharacter+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    194e:	fe 01       	movw	r30, r28
    1950:	ed 5b       	subi	r30, 0xBD	; 189
    1952:	ff 4f       	sbci	r31, 0xFF	; 255
    1954:	60 81       	ld	r22, Z
    1956:	71 81       	ldd	r23, Z+1	; 0x01
    1958:	82 81       	ldd	r24, Z+2	; 0x02
    195a:	93 81       	ldd	r25, Z+3	; 0x03
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	40 e2       	ldi	r20, 0x20	; 32
    1962:	51 e4       	ldi	r21, 0x41	; 65
    1964:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1968:	dc 01       	movw	r26, r24
    196a:	cb 01       	movw	r24, r22
    196c:	bc 01       	movw	r22, r24
    196e:	cd 01       	movw	r24, r26
    1970:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	9e af       	std	Y+62, r25	; 0x3e
    197a:	8d af       	std	Y+61, r24	; 0x3d
    197c:	0f c0       	rjmp	.+30     	; 0x199c <LCD_displayCharacter+0x408>
    197e:	89 e1       	ldi	r24, 0x19	; 25
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	9c af       	std	Y+60, r25	; 0x3c
    1984:	8b af       	std	Y+59, r24	; 0x3b
    1986:	8b ad       	ldd	r24, Y+59	; 0x3b
    1988:	9c ad       	ldd	r25, Y+60	; 0x3c
    198a:	01 97       	sbiw	r24, 0x01	; 1
    198c:	f1 f7       	brne	.-4      	; 0x198a <LCD_displayCharacter+0x3f6>
    198e:	9c af       	std	Y+60, r25	; 0x3c
    1990:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1992:	8d ad       	ldd	r24, Y+61	; 0x3d
    1994:	9e ad       	ldd	r25, Y+62	; 0x3e
    1996:	01 97       	sbiw	r24, 0x01	; 1
    1998:	9e af       	std	Y+62, r25	; 0x3e
    199a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    199c:	8d ad       	ldd	r24, Y+61	; 0x3d
    199e:	9e ad       	ldd	r25, Y+62	; 0x3e
    19a0:	00 97       	sbiw	r24, 0x00	; 0
    19a2:	69 f7       	brne	.-38     	; 0x197e <LCD_displayCharacter+0x3ea>
    19a4:	16 c0       	rjmp	.+44     	; 0x19d2 <LCD_displayCharacter+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a6:	fe 01       	movw	r30, r28
    19a8:	ff 96       	adiw	r30, 0x3f	; 63
    19aa:	60 81       	ld	r22, Z
    19ac:	71 81       	ldd	r23, Z+1	; 0x01
    19ae:	82 81       	ldd	r24, Z+2	; 0x02
    19b0:	93 81       	ldd	r25, Z+3	; 0x03
    19b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b6:	dc 01       	movw	r26, r24
    19b8:	cb 01       	movw	r24, r22
    19ba:	9e af       	std	Y+62, r25	; 0x3e
    19bc:	8d af       	std	Y+61, r24	; 0x3d
    19be:	8d ad       	ldd	r24, Y+61	; 0x3d
    19c0:	9e ad       	ldd	r25, Y+62	; 0x3e
    19c2:	9a af       	std	Y+58, r25	; 0x3a
    19c4:	89 af       	std	Y+57, r24	; 0x39
    19c6:	89 ad       	ldd	r24, Y+57	; 0x39
    19c8:	9a ad       	ldd	r25, Y+58	; 0x3a
    19ca:	01 97       	sbiw	r24, 0x01	; 1
    19cc:	f1 f7       	brne	.-4      	; 0x19ca <LCD_displayCharacter+0x436>
    19ce:	9a af       	std	Y+58, r25	; 0x3a
    19d0:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    19d2:	a2 e3       	ldi	r26, 0x32	; 50
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	e2 e3       	ldi	r30, 0x32	; 50
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	8f 7b       	andi	r24, 0xBF	; 191
    19de:	8c 93       	st	X, r24
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	a0 e8       	ldi	r26, 0x80	; 128
    19e6:	bf e3       	ldi	r27, 0x3F	; 63
    19e8:	8d ab       	std	Y+53, r24	; 0x35
    19ea:	9e ab       	std	Y+54, r25	; 0x36
    19ec:	af ab       	std	Y+55, r26	; 0x37
    19ee:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19f0:	6d a9       	ldd	r22, Y+53	; 0x35
    19f2:	7e a9       	ldd	r23, Y+54	; 0x36
    19f4:	8f a9       	ldd	r24, Y+55	; 0x37
    19f6:	98 ad       	ldd	r25, Y+56	; 0x38
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	4a e7       	ldi	r20, 0x7A	; 122
    19fe:	53 e4       	ldi	r21, 0x43	; 67
    1a00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a04:	dc 01       	movw	r26, r24
    1a06:	cb 01       	movw	r24, r22
    1a08:	89 ab       	std	Y+49, r24	; 0x31
    1a0a:	9a ab       	std	Y+50, r25	; 0x32
    1a0c:	ab ab       	std	Y+51, r26	; 0x33
    1a0e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a10:	69 a9       	ldd	r22, Y+49	; 0x31
    1a12:	7a a9       	ldd	r23, Y+50	; 0x32
    1a14:	8b a9       	ldd	r24, Y+51	; 0x33
    1a16:	9c a9       	ldd	r25, Y+52	; 0x34
    1a18:	20 e0       	ldi	r18, 0x00	; 0
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	40 e8       	ldi	r20, 0x80	; 128
    1a1e:	5f e3       	ldi	r21, 0x3F	; 63
    1a20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a24:	88 23       	and	r24, r24
    1a26:	2c f4       	brge	.+10     	; 0x1a32 <LCD_displayCharacter+0x49e>
		__ticks = 1;
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	98 ab       	std	Y+48, r25	; 0x30
    1a2e:	8f a7       	std	Y+47, r24	; 0x2f
    1a30:	3f c0       	rjmp	.+126    	; 0x1ab0 <LCD_displayCharacter+0x51c>
	else if (__tmp > 65535)
    1a32:	69 a9       	ldd	r22, Y+49	; 0x31
    1a34:	7a a9       	ldd	r23, Y+50	; 0x32
    1a36:	8b a9       	ldd	r24, Y+51	; 0x33
    1a38:	9c a9       	ldd	r25, Y+52	; 0x34
    1a3a:	20 e0       	ldi	r18, 0x00	; 0
    1a3c:	3f ef       	ldi	r19, 0xFF	; 255
    1a3e:	4f e7       	ldi	r20, 0x7F	; 127
    1a40:	57 e4       	ldi	r21, 0x47	; 71
    1a42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a46:	18 16       	cp	r1, r24
    1a48:	4c f5       	brge	.+82     	; 0x1a9c <LCD_displayCharacter+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a4a:	6d a9       	ldd	r22, Y+53	; 0x35
    1a4c:	7e a9       	ldd	r23, Y+54	; 0x36
    1a4e:	8f a9       	ldd	r24, Y+55	; 0x37
    1a50:	98 ad       	ldd	r25, Y+56	; 0x38
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	40 e2       	ldi	r20, 0x20	; 32
    1a58:	51 e4       	ldi	r21, 0x41	; 65
    1a5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22
    1a62:	bc 01       	movw	r22, r24
    1a64:	cd 01       	movw	r24, r26
    1a66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	98 ab       	std	Y+48, r25	; 0x30
    1a70:	8f a7       	std	Y+47, r24	; 0x2f
    1a72:	0f c0       	rjmp	.+30     	; 0x1a92 <LCD_displayCharacter+0x4fe>
    1a74:	89 e1       	ldi	r24, 0x19	; 25
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	9e a7       	std	Y+46, r25	; 0x2e
    1a7a:	8d a7       	std	Y+45, r24	; 0x2d
    1a7c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a7e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a80:	01 97       	sbiw	r24, 0x01	; 1
    1a82:	f1 f7       	brne	.-4      	; 0x1a80 <LCD_displayCharacter+0x4ec>
    1a84:	9e a7       	std	Y+46, r25	; 0x2e
    1a86:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a88:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a8a:	98 a9       	ldd	r25, Y+48	; 0x30
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	98 ab       	std	Y+48, r25	; 0x30
    1a90:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a92:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a94:	98 a9       	ldd	r25, Y+48	; 0x30
    1a96:	00 97       	sbiw	r24, 0x00	; 0
    1a98:	69 f7       	brne	.-38     	; 0x1a74 <LCD_displayCharacter+0x4e0>
    1a9a:	14 c0       	rjmp	.+40     	; 0x1ac4 <LCD_displayCharacter+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a9c:	69 a9       	ldd	r22, Y+49	; 0x31
    1a9e:	7a a9       	ldd	r23, Y+50	; 0x32
    1aa0:	8b a9       	ldd	r24, Y+51	; 0x33
    1aa2:	9c a9       	ldd	r25, Y+52	; 0x34
    1aa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	98 ab       	std	Y+48, r25	; 0x30
    1aae:	8f a7       	std	Y+47, r24	; 0x2f
    1ab0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ab2:	98 a9       	ldd	r25, Y+48	; 0x30
    1ab4:	9c a7       	std	Y+44, r25	; 0x2c
    1ab6:	8b a7       	std	Y+43, r24	; 0x2b
    1ab8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1aba:	9c a5       	ldd	r25, Y+44	; 0x2c
    1abc:	01 97       	sbiw	r24, 0x01	; 1
    1abe:	f1 f7       	brne	.-4      	; 0x1abc <LCD_displayCharacter+0x528>
    1ac0:	9c a7       	std	Y+44, r25	; 0x2c
    1ac2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1ac4:	a2 e3       	ldi	r26, 0x32	; 50
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	e2 e3       	ldi	r30, 0x32	; 50
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	80 64       	ori	r24, 0x40	; 64
    1ad0:	8c 93       	st	X, r24
    1ad2:	80 e0       	ldi	r24, 0x00	; 0
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	a0 e8       	ldi	r26, 0x80	; 128
    1ad8:	bf e3       	ldi	r27, 0x3F	; 63
    1ada:	8f a3       	std	Y+39, r24	; 0x27
    1adc:	98 a7       	std	Y+40, r25	; 0x28
    1ade:	a9 a7       	std	Y+41, r26	; 0x29
    1ae0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ae2:	6f a1       	ldd	r22, Y+39	; 0x27
    1ae4:	78 a5       	ldd	r23, Y+40	; 0x28
    1ae6:	89 a5       	ldd	r24, Y+41	; 0x29
    1ae8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	4a e7       	ldi	r20, 0x7A	; 122
    1af0:	53 e4       	ldi	r21, 0x43	; 67
    1af2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	8b a3       	std	Y+35, r24	; 0x23
    1afc:	9c a3       	std	Y+36, r25	; 0x24
    1afe:	ad a3       	std	Y+37, r26	; 0x25
    1b00:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b02:	6b a1       	ldd	r22, Y+35	; 0x23
    1b04:	7c a1       	ldd	r23, Y+36	; 0x24
    1b06:	8d a1       	ldd	r24, Y+37	; 0x25
    1b08:	9e a1       	ldd	r25, Y+38	; 0x26
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	40 e8       	ldi	r20, 0x80	; 128
    1b10:	5f e3       	ldi	r21, 0x3F	; 63
    1b12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b16:	88 23       	and	r24, r24
    1b18:	2c f4       	brge	.+10     	; 0x1b24 <LCD_displayCharacter+0x590>
		__ticks = 1;
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	9a a3       	std	Y+34, r25	; 0x22
    1b20:	89 a3       	std	Y+33, r24	; 0x21
    1b22:	3f c0       	rjmp	.+126    	; 0x1ba2 <LCD_displayCharacter+0x60e>
	else if (__tmp > 65535)
    1b24:	6b a1       	ldd	r22, Y+35	; 0x23
    1b26:	7c a1       	ldd	r23, Y+36	; 0x24
    1b28:	8d a1       	ldd	r24, Y+37	; 0x25
    1b2a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	3f ef       	ldi	r19, 0xFF	; 255
    1b30:	4f e7       	ldi	r20, 0x7F	; 127
    1b32:	57 e4       	ldi	r21, 0x47	; 71
    1b34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b38:	18 16       	cp	r1, r24
    1b3a:	4c f5       	brge	.+82     	; 0x1b8e <LCD_displayCharacter+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b3c:	6f a1       	ldd	r22, Y+39	; 0x27
    1b3e:	78 a5       	ldd	r23, Y+40	; 0x28
    1b40:	89 a5       	ldd	r24, Y+41	; 0x29
    1b42:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	40 e2       	ldi	r20, 0x20	; 32
    1b4a:	51 e4       	ldi	r21, 0x41	; 65
    1b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	bc 01       	movw	r22, r24
    1b56:	cd 01       	movw	r24, r26
    1b58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	cb 01       	movw	r24, r22
    1b60:	9a a3       	std	Y+34, r25	; 0x22
    1b62:	89 a3       	std	Y+33, r24	; 0x21
    1b64:	0f c0       	rjmp	.+30     	; 0x1b84 <LCD_displayCharacter+0x5f0>
    1b66:	89 e1       	ldi	r24, 0x19	; 25
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	98 a3       	std	Y+32, r25	; 0x20
    1b6c:	8f 8f       	std	Y+31, r24	; 0x1f
    1b6e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b70:	98 a1       	ldd	r25, Y+32	; 0x20
    1b72:	01 97       	sbiw	r24, 0x01	; 1
    1b74:	f1 f7       	brne	.-4      	; 0x1b72 <LCD_displayCharacter+0x5de>
    1b76:	98 a3       	std	Y+32, r25	; 0x20
    1b78:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b7a:	89 a1       	ldd	r24, Y+33	; 0x21
    1b7c:	9a a1       	ldd	r25, Y+34	; 0x22
    1b7e:	01 97       	sbiw	r24, 0x01	; 1
    1b80:	9a a3       	std	Y+34, r25	; 0x22
    1b82:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b84:	89 a1       	ldd	r24, Y+33	; 0x21
    1b86:	9a a1       	ldd	r25, Y+34	; 0x22
    1b88:	00 97       	sbiw	r24, 0x00	; 0
    1b8a:	69 f7       	brne	.-38     	; 0x1b66 <LCD_displayCharacter+0x5d2>
    1b8c:	14 c0       	rjmp	.+40     	; 0x1bb6 <LCD_displayCharacter+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b8e:	6b a1       	ldd	r22, Y+35	; 0x23
    1b90:	7c a1       	ldd	r23, Y+36	; 0x24
    1b92:	8d a1       	ldd	r24, Y+37	; 0x25
    1b94:	9e a1       	ldd	r25, Y+38	; 0x26
    1b96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	cb 01       	movw	r24, r22
    1b9e:	9a a3       	std	Y+34, r25	; 0x22
    1ba0:	89 a3       	std	Y+33, r24	; 0x21
    1ba2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ba4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ba6:	9e 8f       	std	Y+30, r25	; 0x1e
    1ba8:	8d 8f       	std	Y+29, r24	; 0x1d
    1baa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bae:	01 97       	sbiw	r24, 0x01	; 1
    1bb0:	f1 f7       	brne	.-4      	; 0x1bae <LCD_displayCharacter+0x61a>
    1bb2:	9e 8f       	std	Y+30, r25	; 0x1e
    1bb4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
    1bb6:	a5 e3       	ldi	r26, 0x35	; 53
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	e5 e3       	ldi	r30, 0x35	; 53
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	28 2f       	mov	r18, r24
    1bc2:	2f 70       	andi	r18, 0x0F	; 15
    1bc4:	fe 01       	movw	r30, r28
    1bc6:	ed 59       	subi	r30, 0x9D	; 157
    1bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bca:	80 81       	ld	r24, Z
    1bcc:	88 2f       	mov	r24, r24
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	82 95       	swap	r24
    1bd2:	92 95       	swap	r25
    1bd4:	90 7f       	andi	r25, 0xF0	; 240
    1bd6:	98 27       	eor	r25, r24
    1bd8:	80 7f       	andi	r24, 0xF0	; 240
    1bda:	98 27       	eor	r25, r24
    1bdc:	82 2b       	or	r24, r18
    1bde:	8c 93       	st	X, r24
    1be0:	80 e0       	ldi	r24, 0x00	; 0
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	a0 e8       	ldi	r26, 0x80	; 128
    1be6:	bf e3       	ldi	r27, 0x3F	; 63
    1be8:	89 8f       	std	Y+25, r24	; 0x19
    1bea:	9a 8f       	std	Y+26, r25	; 0x1a
    1bec:	ab 8f       	std	Y+27, r26	; 0x1b
    1bee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bf0:	69 8d       	ldd	r22, Y+25	; 0x19
    1bf2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bf4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bf6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	4a e7       	ldi	r20, 0x7A	; 122
    1bfe:	53 e4       	ldi	r21, 0x43	; 67
    1c00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	8d 8b       	std	Y+21, r24	; 0x15
    1c0a:	9e 8b       	std	Y+22, r25	; 0x16
    1c0c:	af 8b       	std	Y+23, r26	; 0x17
    1c0e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c10:	6d 89       	ldd	r22, Y+21	; 0x15
    1c12:	7e 89       	ldd	r23, Y+22	; 0x16
    1c14:	8f 89       	ldd	r24, Y+23	; 0x17
    1c16:	98 8d       	ldd	r25, Y+24	; 0x18
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	40 e8       	ldi	r20, 0x80	; 128
    1c1e:	5f e3       	ldi	r21, 0x3F	; 63
    1c20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c24:	88 23       	and	r24, r24
    1c26:	2c f4       	brge	.+10     	; 0x1c32 <LCD_displayCharacter+0x69e>
		__ticks = 1;
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	9c 8b       	std	Y+20, r25	; 0x14
    1c2e:	8b 8b       	std	Y+19, r24	; 0x13
    1c30:	3f c0       	rjmp	.+126    	; 0x1cb0 <LCD_displayCharacter+0x71c>
	else if (__tmp > 65535)
    1c32:	6d 89       	ldd	r22, Y+21	; 0x15
    1c34:	7e 89       	ldd	r23, Y+22	; 0x16
    1c36:	8f 89       	ldd	r24, Y+23	; 0x17
    1c38:	98 8d       	ldd	r25, Y+24	; 0x18
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	3f ef       	ldi	r19, 0xFF	; 255
    1c3e:	4f e7       	ldi	r20, 0x7F	; 127
    1c40:	57 e4       	ldi	r21, 0x47	; 71
    1c42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c46:	18 16       	cp	r1, r24
    1c48:	4c f5       	brge	.+82     	; 0x1c9c <LCD_displayCharacter+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c4a:	69 8d       	ldd	r22, Y+25	; 0x19
    1c4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	40 e2       	ldi	r20, 0x20	; 32
    1c58:	51 e4       	ldi	r21, 0x41	; 65
    1c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	bc 01       	movw	r22, r24
    1c64:	cd 01       	movw	r24, r26
    1c66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	9c 8b       	std	Y+20, r25	; 0x14
    1c70:	8b 8b       	std	Y+19, r24	; 0x13
    1c72:	0f c0       	rjmp	.+30     	; 0x1c92 <LCD_displayCharacter+0x6fe>
    1c74:	89 e1       	ldi	r24, 0x19	; 25
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	9a 8b       	std	Y+18, r25	; 0x12
    1c7a:	89 8b       	std	Y+17, r24	; 0x11
    1c7c:	89 89       	ldd	r24, Y+17	; 0x11
    1c7e:	9a 89       	ldd	r25, Y+18	; 0x12
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	f1 f7       	brne	.-4      	; 0x1c80 <LCD_displayCharacter+0x6ec>
    1c84:	9a 8b       	std	Y+18, r25	; 0x12
    1c86:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c88:	8b 89       	ldd	r24, Y+19	; 0x13
    1c8a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c8c:	01 97       	sbiw	r24, 0x01	; 1
    1c8e:	9c 8b       	std	Y+20, r25	; 0x14
    1c90:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c92:	8b 89       	ldd	r24, Y+19	; 0x13
    1c94:	9c 89       	ldd	r25, Y+20	; 0x14
    1c96:	00 97       	sbiw	r24, 0x00	; 0
    1c98:	69 f7       	brne	.-38     	; 0x1c74 <LCD_displayCharacter+0x6e0>
    1c9a:	14 c0       	rjmp	.+40     	; 0x1cc4 <LCD_displayCharacter+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c9c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c9e:	7e 89       	ldd	r23, Y+22	; 0x16
    1ca0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ca2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	9c 8b       	std	Y+20, r25	; 0x14
    1cae:	8b 8b       	std	Y+19, r24	; 0x13
    1cb0:	8b 89       	ldd	r24, Y+19	; 0x13
    1cb2:	9c 89       	ldd	r25, Y+20	; 0x14
    1cb4:	98 8b       	std	Y+16, r25	; 0x10
    1cb6:	8f 87       	std	Y+15, r24	; 0x0f
    1cb8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cba:	98 89       	ldd	r25, Y+16	; 0x10
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	f1 f7       	brne	.-4      	; 0x1cbc <LCD_displayCharacter+0x728>
    1cc0:	98 8b       	std	Y+16, r25	; 0x10
    1cc2:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1cc4:	a2 e3       	ldi	r26, 0x32	; 50
    1cc6:	b0 e0       	ldi	r27, 0x00	; 0
    1cc8:	e2 e3       	ldi	r30, 0x32	; 50
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	80 81       	ld	r24, Z
    1cce:	8f 7b       	andi	r24, 0xBF	; 191
    1cd0:	8c 93       	st	X, r24
    1cd2:	80 e0       	ldi	r24, 0x00	; 0
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	a0 e8       	ldi	r26, 0x80	; 128
    1cd8:	bf e3       	ldi	r27, 0x3F	; 63
    1cda:	8b 87       	std	Y+11, r24	; 0x0b
    1cdc:	9c 87       	std	Y+12, r25	; 0x0c
    1cde:	ad 87       	std	Y+13, r26	; 0x0d
    1ce0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ce4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ce6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ce8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	4a e7       	ldi	r20, 0x7A	; 122
    1cf0:	53 e4       	ldi	r21, 0x43	; 67
    1cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	8f 83       	std	Y+7, r24	; 0x07
    1cfc:	98 87       	std	Y+8, r25	; 0x08
    1cfe:	a9 87       	std	Y+9, r26	; 0x09
    1d00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d02:	6f 81       	ldd	r22, Y+7	; 0x07
    1d04:	78 85       	ldd	r23, Y+8	; 0x08
    1d06:	89 85       	ldd	r24, Y+9	; 0x09
    1d08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	40 e8       	ldi	r20, 0x80	; 128
    1d10:	5f e3       	ldi	r21, 0x3F	; 63
    1d12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d16:	88 23       	and	r24, r24
    1d18:	2c f4       	brge	.+10     	; 0x1d24 <LCD_displayCharacter+0x790>
		__ticks = 1;
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	9e 83       	std	Y+6, r25	; 0x06
    1d20:	8d 83       	std	Y+5, r24	; 0x05
    1d22:	3f c0       	rjmp	.+126    	; 0x1da2 <LCD_displayCharacter+0x80e>
	else if (__tmp > 65535)
    1d24:	6f 81       	ldd	r22, Y+7	; 0x07
    1d26:	78 85       	ldd	r23, Y+8	; 0x08
    1d28:	89 85       	ldd	r24, Y+9	; 0x09
    1d2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	3f ef       	ldi	r19, 0xFF	; 255
    1d30:	4f e7       	ldi	r20, 0x7F	; 127
    1d32:	57 e4       	ldi	r21, 0x47	; 71
    1d34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d38:	18 16       	cp	r1, r24
    1d3a:	4c f5       	brge	.+82     	; 0x1d8e <LCD_displayCharacter+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	40 e2       	ldi	r20, 0x20	; 32
    1d4a:	51 e4       	ldi	r21, 0x41	; 65
    1d4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d50:	dc 01       	movw	r26, r24
    1d52:	cb 01       	movw	r24, r22
    1d54:	bc 01       	movw	r22, r24
    1d56:	cd 01       	movw	r24, r26
    1d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	9e 83       	std	Y+6, r25	; 0x06
    1d62:	8d 83       	std	Y+5, r24	; 0x05
    1d64:	0f c0       	rjmp	.+30     	; 0x1d84 <LCD_displayCharacter+0x7f0>
    1d66:	89 e1       	ldi	r24, 0x19	; 25
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	9c 83       	std	Y+4, r25	; 0x04
    1d6c:	8b 83       	std	Y+3, r24	; 0x03
    1d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d70:	9c 81       	ldd	r25, Y+4	; 0x04
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	f1 f7       	brne	.-4      	; 0x1d72 <LCD_displayCharacter+0x7de>
    1d76:	9c 83       	std	Y+4, r25	; 0x04
    1d78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7e:	01 97       	sbiw	r24, 0x01	; 1
    1d80:	9e 83       	std	Y+6, r25	; 0x06
    1d82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d84:	8d 81       	ldd	r24, Y+5	; 0x05
    1d86:	9e 81       	ldd	r25, Y+6	; 0x06
    1d88:	00 97       	sbiw	r24, 0x00	; 0
    1d8a:	69 f7       	brne	.-38     	; 0x1d66 <LCD_displayCharacter+0x7d2>
    1d8c:	14 c0       	rjmp	.+40     	; 0x1db6 <LCD_displayCharacter+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d90:	78 85       	ldd	r23, Y+8	; 0x08
    1d92:	89 85       	ldd	r24, Y+9	; 0x09
    1d94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	9e 83       	std	Y+6, r25	; 0x06
    1da0:	8d 83       	std	Y+5, r24	; 0x05
    1da2:	8d 81       	ldd	r24, Y+5	; 0x05
    1da4:	9e 81       	ldd	r25, Y+6	; 0x06
    1da6:	9a 83       	std	Y+2, r25	; 0x02
    1da8:	89 83       	std	Y+1, r24	; 0x01
    1daa:	89 81       	ldd	r24, Y+1	; 0x01
    1dac:	9a 81       	ldd	r25, Y+2	; 0x02
    1dae:	01 97       	sbiw	r24, 0x01	; 1
    1db0:	f1 f7       	brne	.-4      	; 0x1dae <LCD_displayCharacter+0x81a>
    1db2:	9a 83       	std	Y+2, r25	; 0x02
    1db4:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1db6:	cd 59       	subi	r28, 0x9D	; 157
    1db8:	df 4f       	sbci	r29, 0xFF	; 255
    1dba:	0f b6       	in	r0, 0x3f	; 63
    1dbc:	f8 94       	cli
    1dbe:	de bf       	out	0x3e, r29	; 62
    1dc0:	0f be       	out	0x3f, r0	; 63
    1dc2:	cd bf       	out	0x3d, r28	; 61
    1dc4:	cf 91       	pop	r28
    1dc6:	df 91       	pop	r29
    1dc8:	1f 91       	pop	r17
    1dca:	0f 91       	pop	r16
    1dcc:	08 95       	ret

00001dce <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    1dce:	df 93       	push	r29
    1dd0:	cf 93       	push	r28
    1dd2:	00 d0       	rcall	.+0      	; 0x1dd4 <LCD_displayString+0x6>
    1dd4:	0f 92       	push	r0
    1dd6:	cd b7       	in	r28, 0x3d	; 61
    1dd8:	de b7       	in	r29, 0x3e	; 62
    1dda:	9b 83       	std	Y+3, r25	; 0x03
    1ddc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1dde:	19 82       	std	Y+1, r1	; 0x01
    1de0:	0e c0       	rjmp	.+28     	; 0x1dfe <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1de2:	89 81       	ldd	r24, Y+1	; 0x01
    1de4:	28 2f       	mov	r18, r24
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dea:	9b 81       	ldd	r25, Y+3	; 0x03
    1dec:	fc 01       	movw	r30, r24
    1dee:	e2 0f       	add	r30, r18
    1df0:	f3 1f       	adc	r31, r19
    1df2:	80 81       	ld	r24, Z
    1df4:	0e 94 ca 0a 	call	0x1594	; 0x1594 <LCD_displayCharacter>
		i++;
    1df8:	89 81       	ldd	r24, Y+1	; 0x01
    1dfa:	8f 5f       	subi	r24, 0xFF	; 255
    1dfc:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1dfe:	89 81       	ldd	r24, Y+1	; 0x01
    1e00:	28 2f       	mov	r18, r24
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	8a 81       	ldd	r24, Y+2	; 0x02
    1e06:	9b 81       	ldd	r25, Y+3	; 0x03
    1e08:	fc 01       	movw	r30, r24
    1e0a:	e2 0f       	add	r30, r18
    1e0c:	f3 1f       	adc	r31, r19
    1e0e:	80 81       	ld	r24, Z
    1e10:	88 23       	and	r24, r24
    1e12:	39 f7       	brne	.-50     	; 0x1de2 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    1e14:	0f 90       	pop	r0
    1e16:	0f 90       	pop	r0
    1e18:	0f 90       	pop	r0
    1e1a:	cf 91       	pop	r28
    1e1c:	df 91       	pop	r29
    1e1e:	08 95       	ret

00001e20 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    1e20:	df 93       	push	r29
    1e22:	cf 93       	push	r28
    1e24:	00 d0       	rcall	.+0      	; 0x1e26 <LCD_goToRowColumn+0x6>
    1e26:	00 d0       	rcall	.+0      	; 0x1e28 <LCD_goToRowColumn+0x8>
    1e28:	0f 92       	push	r0
    1e2a:	cd b7       	in	r28, 0x3d	; 61
    1e2c:	de b7       	in	r29, 0x3e	; 62
    1e2e:	8a 83       	std	Y+2, r24	; 0x02
    1e30:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;

	/* first of all calculate the required address */
	switch(row)
    1e32:	8a 81       	ldd	r24, Y+2	; 0x02
    1e34:	28 2f       	mov	r18, r24
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	3d 83       	std	Y+5, r19	; 0x05
    1e3a:	2c 83       	std	Y+4, r18	; 0x04
    1e3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e40:	81 30       	cpi	r24, 0x01	; 1
    1e42:	91 05       	cpc	r25, r1
    1e44:	c1 f0       	breq	.+48     	; 0x1e76 <LCD_goToRowColumn+0x56>
    1e46:	2c 81       	ldd	r18, Y+4	; 0x04
    1e48:	3d 81       	ldd	r19, Y+5	; 0x05
    1e4a:	22 30       	cpi	r18, 0x02	; 2
    1e4c:	31 05       	cpc	r19, r1
    1e4e:	2c f4       	brge	.+10     	; 0x1e5a <LCD_goToRowColumn+0x3a>
    1e50:	8c 81       	ldd	r24, Y+4	; 0x04
    1e52:	9d 81       	ldd	r25, Y+5	; 0x05
    1e54:	00 97       	sbiw	r24, 0x00	; 0
    1e56:	61 f0       	breq	.+24     	; 0x1e70 <LCD_goToRowColumn+0x50>
    1e58:	19 c0       	rjmp	.+50     	; 0x1e8c <LCD_goToRowColumn+0x6c>
    1e5a:	2c 81       	ldd	r18, Y+4	; 0x04
    1e5c:	3d 81       	ldd	r19, Y+5	; 0x05
    1e5e:	22 30       	cpi	r18, 0x02	; 2
    1e60:	31 05       	cpc	r19, r1
    1e62:	69 f0       	breq	.+26     	; 0x1e7e <LCD_goToRowColumn+0x5e>
    1e64:	8c 81       	ldd	r24, Y+4	; 0x04
    1e66:	9d 81       	ldd	r25, Y+5	; 0x05
    1e68:	83 30       	cpi	r24, 0x03	; 3
    1e6a:	91 05       	cpc	r25, r1
    1e6c:	61 f0       	breq	.+24     	; 0x1e86 <LCD_goToRowColumn+0x66>
    1e6e:	0e c0       	rjmp	.+28     	; 0x1e8c <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    1e70:	8b 81       	ldd	r24, Y+3	; 0x03
    1e72:	89 83       	std	Y+1, r24	; 0x01
    1e74:	0b c0       	rjmp	.+22     	; 0x1e8c <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    1e76:	8b 81       	ldd	r24, Y+3	; 0x03
    1e78:	80 5c       	subi	r24, 0xC0	; 192
    1e7a:	89 83       	std	Y+1, r24	; 0x01
    1e7c:	07 c0       	rjmp	.+14     	; 0x1e8c <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    1e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e80:	80 5f       	subi	r24, 0xF0	; 240
    1e82:	89 83       	std	Y+1, r24	; 0x01
    1e84:	03 c0       	rjmp	.+6      	; 0x1e8c <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    1e86:	8b 81       	ldd	r24, Y+3	; 0x03
    1e88:	80 5b       	subi	r24, 0xB0	; 176
    1e8a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION);
    1e8c:	89 81       	ldd	r24, Y+1	; 0x01
    1e8e:	80 68       	ori	r24, 0x80	; 128
    1e90:	0e 94 ad 06 	call	0xd5a	; 0xd5a <LCD_sendCommand>
}
    1e94:	0f 90       	pop	r0
    1e96:	0f 90       	pop	r0
    1e98:	0f 90       	pop	r0
    1e9a:	0f 90       	pop	r0
    1e9c:	0f 90       	pop	r0
    1e9e:	cf 91       	pop	r28
    1ea0:	df 91       	pop	r29
    1ea2:	08 95       	ret

00001ea4 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1ea4:	df 93       	push	r29
    1ea6:	cf 93       	push	r28
    1ea8:	00 d0       	rcall	.+0      	; 0x1eaa <LCD_displayStringRowColumn+0x6>
    1eaa:	00 d0       	rcall	.+0      	; 0x1eac <LCD_displayStringRowColumn+0x8>
    1eac:	cd b7       	in	r28, 0x3d	; 61
    1eae:	de b7       	in	r29, 0x3e	; 62
    1eb0:	89 83       	std	Y+1, r24	; 0x01
    1eb2:	6a 83       	std	Y+2, r22	; 0x02
    1eb4:	5c 83       	std	Y+4, r21	; 0x04
    1eb6:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    1eb8:	89 81       	ldd	r24, Y+1	; 0x01
    1eba:	6a 81       	ldd	r22, Y+2	; 0x02
    1ebc:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    1ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec4:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <LCD_displayString>
}
    1ec8:	0f 90       	pop	r0
    1eca:	0f 90       	pop	r0
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	cf 91       	pop	r28
    1ed2:	df 91       	pop	r29
    1ed4:	08 95       	ret

00001ed6 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    1ed6:	df 93       	push	r29
    1ed8:	cf 93       	push	r28
    1eda:	cd b7       	in	r28, 0x3d	; 61
    1edc:	de b7       	in	r29, 0x3e	; 62
    1ede:	62 97       	sbiw	r28, 0x12	; 18
    1ee0:	0f b6       	in	r0, 0x3f	; 63
    1ee2:	f8 94       	cli
    1ee4:	de bf       	out	0x3e, r29	; 62
    1ee6:	0f be       	out	0x3f, r0	; 63
    1ee8:	cd bf       	out	0x3d, r28	; 61
    1eea:	9a 8b       	std	Y+18, r25	; 0x12
    1eec:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    1eee:	89 89       	ldd	r24, Y+17	; 0x11
    1ef0:	9a 89       	ldd	r25, Y+18	; 0x12
    1ef2:	9e 01       	movw	r18, r28
    1ef4:	2f 5f       	subi	r18, 0xFF	; 255
    1ef6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef8:	b9 01       	movw	r22, r18
    1efa:	4a e0       	ldi	r20, 0x0A	; 10
    1efc:	50 e0       	ldi	r21, 0x00	; 0
    1efe:	0e 94 d6 13 	call	0x27ac	; 0x27ac <itoa>
   LCD_displayString(buff);
    1f02:	ce 01       	movw	r24, r28
    1f04:	01 96       	adiw	r24, 0x01	; 1
    1f06:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <LCD_displayString>
}
    1f0a:	62 96       	adiw	r28, 0x12	; 18
    1f0c:	0f b6       	in	r0, 0x3f	; 63
    1f0e:	f8 94       	cli
    1f10:	de bf       	out	0x3e, r29	; 62
    1f12:	0f be       	out	0x3f, r0	; 63
    1f14:	cd bf       	out	0x3d, r28	; 61
    1f16:	cf 91       	pop	r28
    1f18:	df 91       	pop	r29
    1f1a:	08 95       	ret

00001f1c <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    1f1c:	df 93       	push	r29
    1f1e:	cf 93       	push	r28
    1f20:	cd b7       	in	r28, 0x3d	; 61
    1f22:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	0e 94 ad 06 	call	0xd5a	; 0xd5a <LCD_sendCommand>
}
    1f2a:	cf 91       	pop	r28
    1f2c:	df 91       	pop	r29
    1f2e:	08 95       	ret

00001f30 <catch_password>:



/////////////////////////////////////////function to catch pass in an array/////////////////////////////////////

static void catch_password(void){
    1f30:	df 93       	push	r29
    1f32:	cf 93       	push	r28
    1f34:	cd b7       	in	r28, 0x3d	; 61
    1f36:	de b7       	in	r29, 0x3e	; 62
    1f38:	2f 97       	sbiw	r28, 0x0f	; 15
    1f3a:	0f b6       	in	r0, 0x3f	; 63
    1f3c:	f8 94       	cli
    1f3e:	de bf       	out	0x3e, r29	; 62
    1f40:	0f be       	out	0x3f, r0	; 63
    1f42:	cd bf       	out	0x3d, r28	; 61
	uint8 t;
	LCD_goToRowColumn(1,0);
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	60 e0       	ldi	r22, 0x00	; 0
    1f48:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <LCD_goToRowColumn>
	do{
	t=KeyPad_getPressedKey();
    1f4c:	0e 94 00 06 	call	0xc00	; 0xc00 <KeyPad_getPressedKey>
    1f50:	8f 87       	std	Y+15, r24	; 0x0f
	UART_sendByte(t);
    1f52:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f54:	0e 94 0a 13 	call	0x2614	; 0x2614 <UART_sendByte>
	LCD_displayCharacter('*');
    1f58:	8a e2       	ldi	r24, 0x2A	; 42
    1f5a:	0e 94 ca 0a 	call	0x1594	; 0x1594 <LCD_displayCharacter>
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	a6 e9       	ldi	r26, 0x96	; 150
    1f64:	b3 e4       	ldi	r27, 0x43	; 67
    1f66:	8b 87       	std	Y+11, r24	; 0x0b
    1f68:	9c 87       	std	Y+12, r25	; 0x0c
    1f6a:	ad 87       	std	Y+13, r26	; 0x0d
    1f6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f70:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f72:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f74:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	4a e7       	ldi	r20, 0x7A	; 122
    1f7c:	53 e4       	ldi	r21, 0x43	; 67
    1f7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f82:	dc 01       	movw	r26, r24
    1f84:	cb 01       	movw	r24, r22
    1f86:	8f 83       	std	Y+7, r24	; 0x07
    1f88:	98 87       	std	Y+8, r25	; 0x08
    1f8a:	a9 87       	std	Y+9, r26	; 0x09
    1f8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f90:	78 85       	ldd	r23, Y+8	; 0x08
    1f92:	89 85       	ldd	r24, Y+9	; 0x09
    1f94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	40 e8       	ldi	r20, 0x80	; 128
    1f9c:	5f e3       	ldi	r21, 0x3F	; 63
    1f9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fa2:	88 23       	and	r24, r24
    1fa4:	2c f4       	brge	.+10     	; 0x1fb0 <catch_password+0x80>
		__ticks = 1;
    1fa6:	81 e0       	ldi	r24, 0x01	; 1
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	9e 83       	std	Y+6, r25	; 0x06
    1fac:	8d 83       	std	Y+5, r24	; 0x05
    1fae:	3f c0       	rjmp	.+126    	; 0x202e <catch_password+0xfe>
	else if (__tmp > 65535)
    1fb0:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb2:	78 85       	ldd	r23, Y+8	; 0x08
    1fb4:	89 85       	ldd	r24, Y+9	; 0x09
    1fb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb8:	20 e0       	ldi	r18, 0x00	; 0
    1fba:	3f ef       	ldi	r19, 0xFF	; 255
    1fbc:	4f e7       	ldi	r20, 0x7F	; 127
    1fbe:	57 e4       	ldi	r21, 0x47	; 71
    1fc0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fc4:	18 16       	cp	r1, r24
    1fc6:	4c f5       	brge	.+82     	; 0x201a <catch_password+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fca:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fce:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	40 e2       	ldi	r20, 0x20	; 32
    1fd6:	51 e4       	ldi	r21, 0x41	; 65
    1fd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	bc 01       	movw	r22, r24
    1fe2:	cd 01       	movw	r24, r26
    1fe4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	9e 83       	std	Y+6, r25	; 0x06
    1fee:	8d 83       	std	Y+5, r24	; 0x05
    1ff0:	0f c0       	rjmp	.+30     	; 0x2010 <catch_password+0xe0>
    1ff2:	89 e1       	ldi	r24, 0x19	; 25
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	9c 83       	std	Y+4, r25	; 0x04
    1ff8:	8b 83       	std	Y+3, r24	; 0x03
    1ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffe:	01 97       	sbiw	r24, 0x01	; 1
    2000:	f1 f7       	brne	.-4      	; 0x1ffe <catch_password+0xce>
    2002:	9c 83       	std	Y+4, r25	; 0x04
    2004:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2006:	8d 81       	ldd	r24, Y+5	; 0x05
    2008:	9e 81       	ldd	r25, Y+6	; 0x06
    200a:	01 97       	sbiw	r24, 0x01	; 1
    200c:	9e 83       	std	Y+6, r25	; 0x06
    200e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2010:	8d 81       	ldd	r24, Y+5	; 0x05
    2012:	9e 81       	ldd	r25, Y+6	; 0x06
    2014:	00 97       	sbiw	r24, 0x00	; 0
    2016:	69 f7       	brne	.-38     	; 0x1ff2 <catch_password+0xc2>
    2018:	14 c0       	rjmp	.+40     	; 0x2042 <catch_password+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    201a:	6f 81       	ldd	r22, Y+7	; 0x07
    201c:	78 85       	ldd	r23, Y+8	; 0x08
    201e:	89 85       	ldd	r24, Y+9	; 0x09
    2020:	9a 85       	ldd	r25, Y+10	; 0x0a
    2022:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	9e 83       	std	Y+6, r25	; 0x06
    202c:	8d 83       	std	Y+5, r24	; 0x05
    202e:	8d 81       	ldd	r24, Y+5	; 0x05
    2030:	9e 81       	ldd	r25, Y+6	; 0x06
    2032:	9a 83       	std	Y+2, r25	; 0x02
    2034:	89 83       	std	Y+1, r24	; 0x01
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	9a 81       	ldd	r25, Y+2	; 0x02
    203a:	01 97       	sbiw	r24, 0x01	; 1
    203c:	f1 f7       	brne	.-4      	; 0x203a <catch_password+0x10a>
    203e:	9a 83       	std	Y+2, r25	; 0x02
    2040:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(300);
	}
	while(t !=42);
    2042:	8f 85       	ldd	r24, Y+15	; 0x0f
    2044:	8a 32       	cpi	r24, 0x2A	; 42
    2046:	09 f0       	breq	.+2      	; 0x204a <catch_password+0x11a>
    2048:	81 cf       	rjmp	.-254    	; 0x1f4c <catch_password+0x1c>

}
    204a:	2f 96       	adiw	r28, 0x0f	; 15
    204c:	0f b6       	in	r0, 0x3f	; 63
    204e:	f8 94       	cli
    2050:	de bf       	out	0x3e, r29	; 62
    2052:	0f be       	out	0x3f, r0	; 63
    2054:	cd bf       	out	0x3d, r28	; 61
    2056:	cf 91       	pop	r28
    2058:	df 91       	pop	r29
    205a:	08 95       	ret

0000205c <initial_password>:



////////////////////// function to change pass ///////////////////////////////////////

void initial_password(void){
    205c:	df 93       	push	r29
    205e:	cf 93       	push	r28
    2060:	cd b7       	in	r28, 0x3d	; 61
    2062:	de b7       	in	r29, 0x3e	; 62
    2064:	6c 97       	sbiw	r28, 0x1c	; 28
    2066:	0f b6       	in	r0, 0x3f	; 63
    2068:	f8 94       	cli
    206a:	de bf       	out	0x3e, r29	; 62
    206c:	0f be       	out	0x3f, r0	; 63
    206e:	cd bf       	out	0x3d, r28	; 61
	LCD_displayString("enter new pass");
    2070:	82 ea       	ldi	r24, 0xA2	; 162
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <LCD_displayString>
		catch_password();
    2078:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <catch_password>
		LCD_clearScreen();
    207c:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_clearScreen>
		LCD_displayString("enter pass again");
    2080:	81 eb       	ldi	r24, 0xB1	; 177
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <LCD_displayString>
		catch_password();
    2088:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <catch_password>
		LCD_clearScreen();
    208c:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_clearScreen>
    2090:	88 c0       	rjmp	.+272    	; 0x21a2 <initial_password+0x146>
	while(!(UART_recieveByte())){
		LCD_displayString("wrong pass");
    2092:	82 ec       	ldi	r24, 0xC2	; 194
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <LCD_displayString>
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	a6 e9       	ldi	r26, 0x96	; 150
    20a0:	b3 e4       	ldi	r27, 0x43	; 67
    20a2:	89 8f       	std	Y+25, r24	; 0x19
    20a4:	9a 8f       	std	Y+26, r25	; 0x1a
    20a6:	ab 8f       	std	Y+27, r26	; 0x1b
    20a8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20aa:	69 8d       	ldd	r22, Y+25	; 0x19
    20ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	4a e7       	ldi	r20, 0x7A	; 122
    20b8:	53 e4       	ldi	r21, 0x43	; 67
    20ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	8d 8b       	std	Y+21, r24	; 0x15
    20c4:	9e 8b       	std	Y+22, r25	; 0x16
    20c6:	af 8b       	std	Y+23, r26	; 0x17
    20c8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20ca:	6d 89       	ldd	r22, Y+21	; 0x15
    20cc:	7e 89       	ldd	r23, Y+22	; 0x16
    20ce:	8f 89       	ldd	r24, Y+23	; 0x17
    20d0:	98 8d       	ldd	r25, Y+24	; 0x18
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	40 e8       	ldi	r20, 0x80	; 128
    20d8:	5f e3       	ldi	r21, 0x3F	; 63
    20da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20de:	88 23       	and	r24, r24
    20e0:	2c f4       	brge	.+10     	; 0x20ec <initial_password+0x90>
		__ticks = 1;
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	9c 8b       	std	Y+20, r25	; 0x14
    20e8:	8b 8b       	std	Y+19, r24	; 0x13
    20ea:	3f c0       	rjmp	.+126    	; 0x216a <initial_password+0x10e>
	else if (__tmp > 65535)
    20ec:	6d 89       	ldd	r22, Y+21	; 0x15
    20ee:	7e 89       	ldd	r23, Y+22	; 0x16
    20f0:	8f 89       	ldd	r24, Y+23	; 0x17
    20f2:	98 8d       	ldd	r25, Y+24	; 0x18
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	3f ef       	ldi	r19, 0xFF	; 255
    20f8:	4f e7       	ldi	r20, 0x7F	; 127
    20fa:	57 e4       	ldi	r21, 0x47	; 71
    20fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2100:	18 16       	cp	r1, r24
    2102:	4c f5       	brge	.+82     	; 0x2156 <initial_password+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2104:	69 8d       	ldd	r22, Y+25	; 0x19
    2106:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2108:	8b 8d       	ldd	r24, Y+27	; 0x1b
    210a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	40 e2       	ldi	r20, 0x20	; 32
    2112:	51 e4       	ldi	r21, 0x41	; 65
    2114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	bc 01       	movw	r22, r24
    211e:	cd 01       	movw	r24, r26
    2120:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2124:	dc 01       	movw	r26, r24
    2126:	cb 01       	movw	r24, r22
    2128:	9c 8b       	std	Y+20, r25	; 0x14
    212a:	8b 8b       	std	Y+19, r24	; 0x13
    212c:	0f c0       	rjmp	.+30     	; 0x214c <initial_password+0xf0>
    212e:	89 e1       	ldi	r24, 0x19	; 25
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	9a 8b       	std	Y+18, r25	; 0x12
    2134:	89 8b       	std	Y+17, r24	; 0x11
    2136:	89 89       	ldd	r24, Y+17	; 0x11
    2138:	9a 89       	ldd	r25, Y+18	; 0x12
    213a:	01 97       	sbiw	r24, 0x01	; 1
    213c:	f1 f7       	brne	.-4      	; 0x213a <initial_password+0xde>
    213e:	9a 8b       	std	Y+18, r25	; 0x12
    2140:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2142:	8b 89       	ldd	r24, Y+19	; 0x13
    2144:	9c 89       	ldd	r25, Y+20	; 0x14
    2146:	01 97       	sbiw	r24, 0x01	; 1
    2148:	9c 8b       	std	Y+20, r25	; 0x14
    214a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    214c:	8b 89       	ldd	r24, Y+19	; 0x13
    214e:	9c 89       	ldd	r25, Y+20	; 0x14
    2150:	00 97       	sbiw	r24, 0x00	; 0
    2152:	69 f7       	brne	.-38     	; 0x212e <initial_password+0xd2>
    2154:	14 c0       	rjmp	.+40     	; 0x217e <initial_password+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2156:	6d 89       	ldd	r22, Y+21	; 0x15
    2158:	7e 89       	ldd	r23, Y+22	; 0x16
    215a:	8f 89       	ldd	r24, Y+23	; 0x17
    215c:	98 8d       	ldd	r25, Y+24	; 0x18
    215e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2162:	dc 01       	movw	r26, r24
    2164:	cb 01       	movw	r24, r22
    2166:	9c 8b       	std	Y+20, r25	; 0x14
    2168:	8b 8b       	std	Y+19, r24	; 0x13
    216a:	8b 89       	ldd	r24, Y+19	; 0x13
    216c:	9c 89       	ldd	r25, Y+20	; 0x14
    216e:	98 8b       	std	Y+16, r25	; 0x10
    2170:	8f 87       	std	Y+15, r24	; 0x0f
    2172:	8f 85       	ldd	r24, Y+15	; 0x0f
    2174:	98 89       	ldd	r25, Y+16	; 0x10
    2176:	01 97       	sbiw	r24, 0x01	; 1
    2178:	f1 f7       	brne	.-4      	; 0x2176 <initial_password+0x11a>
    217a:	98 8b       	std	Y+16, r25	; 0x10
    217c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(300);
					LCD_clearScreen();
    217e:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_clearScreen>
		LCD_displayString("enter new pass");
    2182:	82 ea       	ldi	r24, 0xA2	; 162
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <LCD_displayString>
	catch_password();
    218a:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <catch_password>
	LCD_clearScreen();
    218e:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_clearScreen>
	LCD_displayString("enter pass again");
    2192:	81 eb       	ldi	r24, 0xB1	; 177
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <LCD_displayString>
	catch_password();
    219a:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <catch_password>
	LCD_clearScreen();
    219e:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_clearScreen>
		catch_password();
		LCD_clearScreen();
		LCD_displayString("enter pass again");
		catch_password();
		LCD_clearScreen();
	while(!(UART_recieveByte())){
    21a2:	0e 94 21 13 	call	0x2642	; 0x2642 <UART_recieveByte>
    21a6:	88 23       	and	r24, r24
    21a8:	09 f4       	brne	.+2      	; 0x21ac <initial_password+0x150>
    21aa:	73 cf       	rjmp	.-282    	; 0x2092 <initial_password+0x36>
	LCD_clearScreen();
	LCD_displayString("enter pass again");
	catch_password();
	LCD_clearScreen();
	}
	LCD_displayString("done");
    21ac:	8d ec       	ldi	r24, 0xCD	; 205
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <LCD_displayString>
    21b4:	80 e0       	ldi	r24, 0x00	; 0
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	a6 e9       	ldi	r26, 0x96	; 150
    21ba:	b3 e4       	ldi	r27, 0x43	; 67
    21bc:	8b 87       	std	Y+11, r24	; 0x0b
    21be:	9c 87       	std	Y+12, r25	; 0x0c
    21c0:	ad 87       	std	Y+13, r26	; 0x0d
    21c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    21c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    21c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	4a e7       	ldi	r20, 0x7A	; 122
    21d2:	53 e4       	ldi	r21, 0x43	; 67
    21d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d8:	dc 01       	movw	r26, r24
    21da:	cb 01       	movw	r24, r22
    21dc:	8f 83       	std	Y+7, r24	; 0x07
    21de:	98 87       	std	Y+8, r25	; 0x08
    21e0:	a9 87       	std	Y+9, r26	; 0x09
    21e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21e4:	6f 81       	ldd	r22, Y+7	; 0x07
    21e6:	78 85       	ldd	r23, Y+8	; 0x08
    21e8:	89 85       	ldd	r24, Y+9	; 0x09
    21ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	40 e8       	ldi	r20, 0x80	; 128
    21f2:	5f e3       	ldi	r21, 0x3F	; 63
    21f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21f8:	88 23       	and	r24, r24
    21fa:	2c f4       	brge	.+10     	; 0x2206 <initial_password+0x1aa>
		__ticks = 1;
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	9e 83       	std	Y+6, r25	; 0x06
    2202:	8d 83       	std	Y+5, r24	; 0x05
    2204:	3f c0       	rjmp	.+126    	; 0x2284 <initial_password+0x228>
	else if (__tmp > 65535)
    2206:	6f 81       	ldd	r22, Y+7	; 0x07
    2208:	78 85       	ldd	r23, Y+8	; 0x08
    220a:	89 85       	ldd	r24, Y+9	; 0x09
    220c:	9a 85       	ldd	r25, Y+10	; 0x0a
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	3f ef       	ldi	r19, 0xFF	; 255
    2212:	4f e7       	ldi	r20, 0x7F	; 127
    2214:	57 e4       	ldi	r21, 0x47	; 71
    2216:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    221a:	18 16       	cp	r1, r24
    221c:	4c f5       	brge	.+82     	; 0x2270 <initial_password+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    221e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2220:	7c 85       	ldd	r23, Y+12	; 0x0c
    2222:	8d 85       	ldd	r24, Y+13	; 0x0d
    2224:	9e 85       	ldd	r25, Y+14	; 0x0e
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	40 e2       	ldi	r20, 0x20	; 32
    222c:	51 e4       	ldi	r21, 0x41	; 65
    222e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2232:	dc 01       	movw	r26, r24
    2234:	cb 01       	movw	r24, r22
    2236:	bc 01       	movw	r22, r24
    2238:	cd 01       	movw	r24, r26
    223a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223e:	dc 01       	movw	r26, r24
    2240:	cb 01       	movw	r24, r22
    2242:	9e 83       	std	Y+6, r25	; 0x06
    2244:	8d 83       	std	Y+5, r24	; 0x05
    2246:	0f c0       	rjmp	.+30     	; 0x2266 <initial_password+0x20a>
    2248:	89 e1       	ldi	r24, 0x19	; 25
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	9c 83       	std	Y+4, r25	; 0x04
    224e:	8b 83       	std	Y+3, r24	; 0x03
    2250:	8b 81       	ldd	r24, Y+3	; 0x03
    2252:	9c 81       	ldd	r25, Y+4	; 0x04
    2254:	01 97       	sbiw	r24, 0x01	; 1
    2256:	f1 f7       	brne	.-4      	; 0x2254 <initial_password+0x1f8>
    2258:	9c 83       	std	Y+4, r25	; 0x04
    225a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    225c:	8d 81       	ldd	r24, Y+5	; 0x05
    225e:	9e 81       	ldd	r25, Y+6	; 0x06
    2260:	01 97       	sbiw	r24, 0x01	; 1
    2262:	9e 83       	std	Y+6, r25	; 0x06
    2264:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2266:	8d 81       	ldd	r24, Y+5	; 0x05
    2268:	9e 81       	ldd	r25, Y+6	; 0x06
    226a:	00 97       	sbiw	r24, 0x00	; 0
    226c:	69 f7       	brne	.-38     	; 0x2248 <initial_password+0x1ec>
    226e:	14 c0       	rjmp	.+40     	; 0x2298 <initial_password+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2270:	6f 81       	ldd	r22, Y+7	; 0x07
    2272:	78 85       	ldd	r23, Y+8	; 0x08
    2274:	89 85       	ldd	r24, Y+9	; 0x09
    2276:	9a 85       	ldd	r25, Y+10	; 0x0a
    2278:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    227c:	dc 01       	movw	r26, r24
    227e:	cb 01       	movw	r24, r22
    2280:	9e 83       	std	Y+6, r25	; 0x06
    2282:	8d 83       	std	Y+5, r24	; 0x05
    2284:	8d 81       	ldd	r24, Y+5	; 0x05
    2286:	9e 81       	ldd	r25, Y+6	; 0x06
    2288:	9a 83       	std	Y+2, r25	; 0x02
    228a:	89 83       	std	Y+1, r24	; 0x01
    228c:	89 81       	ldd	r24, Y+1	; 0x01
    228e:	9a 81       	ldd	r25, Y+2	; 0x02
    2290:	01 97       	sbiw	r24, 0x01	; 1
    2292:	f1 f7       	brne	.-4      	; 0x2290 <initial_password+0x234>
    2294:	9a 83       	std	Y+2, r25	; 0x02
    2296:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(300);
			LCD_clearScreen();
    2298:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_clearScreen>
}
    229c:	6c 96       	adiw	r28, 0x1c	; 28
    229e:	0f b6       	in	r0, 0x3f	; 63
    22a0:	f8 94       	cli
    22a2:	de bf       	out	0x3e, r29	; 62
    22a4:	0f be       	out	0x3f, r0	; 63
    22a6:	cd bf       	out	0x3d, r28	; 61
    22a8:	cf 91       	pop	r28
    22aa:	df 91       	pop	r29
    22ac:	08 95       	ret

000022ae <entering_password>:
/*
 * ask you for a pass if wrong it gives you a 3 trials
 * it returns the number of wrong trials
 */

uint8 entering_password(void){
    22ae:	df 93       	push	r29
    22b0:	cf 93       	push	r28
    22b2:	cd b7       	in	r28, 0x3d	; 61
    22b4:	de b7       	in	r29, 0x3e	; 62
    22b6:	2f 97       	sbiw	r28, 0x0f	; 15
    22b8:	0f b6       	in	r0, 0x3f	; 63
    22ba:	f8 94       	cli
    22bc:	de bf       	out	0x3e, r29	; 62
    22be:	0f be       	out	0x3f, r0	; 63
    22c0:	cd bf       	out	0x3d, r28	; 61

	uint8 i;
	LCD_displayString("enter password");
    22c2:	82 ed       	ldi	r24, 0xD2	; 210
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <LCD_displayString>
			catch_password();
    22ca:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <catch_password>
			LCD_clearScreen();
    22ce:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_clearScreen>
		for( i=0;i<2 && !(UART_recieveByte());i++){
    22d2:	1f 86       	std	Y+15, r1	; 0x0f
    22d4:	83 c0       	rjmp	.+262    	; 0x23dc <entering_password+0x12e>
			LCD_displayString("wrong pass");
    22d6:	82 ec       	ldi	r24, 0xC2	; 194
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <LCD_displayString>
    22de:	80 e0       	ldi	r24, 0x00	; 0
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	a6 e9       	ldi	r26, 0x96	; 150
    22e4:	b3 e4       	ldi	r27, 0x43	; 67
    22e6:	8b 87       	std	Y+11, r24	; 0x0b
    22e8:	9c 87       	std	Y+12, r25	; 0x0c
    22ea:	ad 87       	std	Y+13, r26	; 0x0d
    22ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    22f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    22f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	4a e7       	ldi	r20, 0x7A	; 122
    22fc:	53 e4       	ldi	r21, 0x43	; 67
    22fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2302:	dc 01       	movw	r26, r24
    2304:	cb 01       	movw	r24, r22
    2306:	8f 83       	std	Y+7, r24	; 0x07
    2308:	98 87       	std	Y+8, r25	; 0x08
    230a:	a9 87       	std	Y+9, r26	; 0x09
    230c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    230e:	6f 81       	ldd	r22, Y+7	; 0x07
    2310:	78 85       	ldd	r23, Y+8	; 0x08
    2312:	89 85       	ldd	r24, Y+9	; 0x09
    2314:	9a 85       	ldd	r25, Y+10	; 0x0a
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	40 e8       	ldi	r20, 0x80	; 128
    231c:	5f e3       	ldi	r21, 0x3F	; 63
    231e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2322:	88 23       	and	r24, r24
    2324:	2c f4       	brge	.+10     	; 0x2330 <entering_password+0x82>
		__ticks = 1;
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	9e 83       	std	Y+6, r25	; 0x06
    232c:	8d 83       	std	Y+5, r24	; 0x05
    232e:	3f c0       	rjmp	.+126    	; 0x23ae <entering_password+0x100>
	else if (__tmp > 65535)
    2330:	6f 81       	ldd	r22, Y+7	; 0x07
    2332:	78 85       	ldd	r23, Y+8	; 0x08
    2334:	89 85       	ldd	r24, Y+9	; 0x09
    2336:	9a 85       	ldd	r25, Y+10	; 0x0a
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	3f ef       	ldi	r19, 0xFF	; 255
    233c:	4f e7       	ldi	r20, 0x7F	; 127
    233e:	57 e4       	ldi	r21, 0x47	; 71
    2340:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2344:	18 16       	cp	r1, r24
    2346:	4c f5       	brge	.+82     	; 0x239a <entering_password+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2348:	6b 85       	ldd	r22, Y+11	; 0x0b
    234a:	7c 85       	ldd	r23, Y+12	; 0x0c
    234c:	8d 85       	ldd	r24, Y+13	; 0x0d
    234e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	40 e2       	ldi	r20, 0x20	; 32
    2356:	51 e4       	ldi	r21, 0x41	; 65
    2358:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	bc 01       	movw	r22, r24
    2362:	cd 01       	movw	r24, r26
    2364:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2368:	dc 01       	movw	r26, r24
    236a:	cb 01       	movw	r24, r22
    236c:	9e 83       	std	Y+6, r25	; 0x06
    236e:	8d 83       	std	Y+5, r24	; 0x05
    2370:	0f c0       	rjmp	.+30     	; 0x2390 <entering_password+0xe2>
    2372:	89 e1       	ldi	r24, 0x19	; 25
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	9c 83       	std	Y+4, r25	; 0x04
    2378:	8b 83       	std	Y+3, r24	; 0x03
    237a:	8b 81       	ldd	r24, Y+3	; 0x03
    237c:	9c 81       	ldd	r25, Y+4	; 0x04
    237e:	01 97       	sbiw	r24, 0x01	; 1
    2380:	f1 f7       	brne	.-4      	; 0x237e <entering_password+0xd0>
    2382:	9c 83       	std	Y+4, r25	; 0x04
    2384:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2386:	8d 81       	ldd	r24, Y+5	; 0x05
    2388:	9e 81       	ldd	r25, Y+6	; 0x06
    238a:	01 97       	sbiw	r24, 0x01	; 1
    238c:	9e 83       	std	Y+6, r25	; 0x06
    238e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2390:	8d 81       	ldd	r24, Y+5	; 0x05
    2392:	9e 81       	ldd	r25, Y+6	; 0x06
    2394:	00 97       	sbiw	r24, 0x00	; 0
    2396:	69 f7       	brne	.-38     	; 0x2372 <entering_password+0xc4>
    2398:	14 c0       	rjmp	.+40     	; 0x23c2 <entering_password+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    239a:	6f 81       	ldd	r22, Y+7	; 0x07
    239c:	78 85       	ldd	r23, Y+8	; 0x08
    239e:	89 85       	ldd	r24, Y+9	; 0x09
    23a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	9e 83       	std	Y+6, r25	; 0x06
    23ac:	8d 83       	std	Y+5, r24	; 0x05
    23ae:	8d 81       	ldd	r24, Y+5	; 0x05
    23b0:	9e 81       	ldd	r25, Y+6	; 0x06
    23b2:	9a 83       	std	Y+2, r25	; 0x02
    23b4:	89 83       	std	Y+1, r24	; 0x01
    23b6:	89 81       	ldd	r24, Y+1	; 0x01
    23b8:	9a 81       	ldd	r25, Y+2	; 0x02
    23ba:	01 97       	sbiw	r24, 0x01	; 1
    23bc:	f1 f7       	brne	.-4      	; 0x23ba <entering_password+0x10c>
    23be:	9a 83       	std	Y+2, r25	; 0x02
    23c0:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(300);
			LCD_clearScreen();
    23c2:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_clearScreen>
		LCD_displayString("rapeat a pass");
    23c6:	81 ee       	ldi	r24, 0xE1	; 225
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <LCD_displayString>
		catch_password();
    23ce:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <catch_password>
		LCD_clearScreen();
    23d2:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_clearScreen>

	uint8 i;
	LCD_displayString("enter password");
			catch_password();
			LCD_clearScreen();
		for( i=0;i<2 && !(UART_recieveByte());i++){
    23d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    23d8:	8f 5f       	subi	r24, 0xFF	; 255
    23da:	8f 87       	std	Y+15, r24	; 0x0f
    23dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    23de:	82 30       	cpi	r24, 0x02	; 2
    23e0:	28 f4       	brcc	.+10     	; 0x23ec <entering_password+0x13e>
    23e2:	0e 94 21 13 	call	0x2642	; 0x2642 <UART_recieveByte>
    23e6:	88 23       	and	r24, r24
    23e8:	09 f4       	brne	.+2      	; 0x23ec <entering_password+0x13e>
    23ea:	75 cf       	rjmp	.-278    	; 0x22d6 <entering_password+0x28>
			LCD_clearScreen();
		LCD_displayString("rapeat a pass");
		catch_password();
		LCD_clearScreen();
		}
		return i ;
    23ec:	8f 85       	ldd	r24, Y+15	; 0x0f

}
    23ee:	2f 96       	adiw	r28, 0x0f	; 15
    23f0:	0f b6       	in	r0, 0x3f	; 63
    23f2:	f8 94       	cli
    23f4:	de bf       	out	0x3e, r29	; 62
    23f6:	0f be       	out	0x3f, r0	; 63
    23f8:	cd bf       	out	0x3d, r28	; 61
    23fa:	cf 91       	pop	r28
    23fc:	df 91       	pop	r29
    23fe:	08 95       	ret

00002400 <__vector_6>:
 */
#include "timer.h"
 uint8 flag=0;

ISR(TIMER1_COMPA_vect)
{
    2400:	1f 92       	push	r1
    2402:	0f 92       	push	r0
    2404:	0f b6       	in	r0, 0x3f	; 63
    2406:	0f 92       	push	r0
    2408:	11 24       	eor	r1, r1
    240a:	2f 93       	push	r18
    240c:	3f 93       	push	r19
    240e:	4f 93       	push	r20
    2410:	5f 93       	push	r21
    2412:	6f 93       	push	r22
    2414:	7f 93       	push	r23
    2416:	8f 93       	push	r24
    2418:	9f 93       	push	r25
    241a:	af 93       	push	r26
    241c:	bf 93       	push	r27
    241e:	ef 93       	push	r30
    2420:	ff 93       	push	r31
    2422:	df 93       	push	r29
    2424:	cf 93       	push	r28
    2426:	cd b7       	in	r28, 0x3d	; 61
    2428:	de b7       	in	r29, 0x3e	; 62
    242a:	2e 97       	sbiw	r28, 0x0e	; 14
    242c:	de bf       	out	0x3e, r29	; 62
    242e:	cd bf       	out	0x3d, r28	; 61
	flag++;
    2430:	80 91 12 01 	lds	r24, 0x0112
    2434:	8f 5f       	subi	r24, 0xFF	; 255
    2436:	80 93 12 01 	sts	0x0112, r24
	if(flag==15){
    243a:	80 91 12 01 	lds	r24, 0x0112
    243e:	8f 30       	cpi	r24, 0x0F	; 15
    2440:	41 f4       	brne	.+16     	; 0x2452 <__vector_6+0x52>
		LCD_clearScreen();
    2442:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_clearScreen>
		LCD_displayString("door opening");
    2446:	8f ee       	ldi	r24, 0xEF	; 239
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <LCD_displayString>
        LCD_clearScreen();
    244e:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_clearScreen>

	}
	if(flag==30){
    2452:	80 91 12 01 	lds	r24, 0x0112
    2456:	8e 31       	cpi	r24, 0x1E	; 30
    2458:	09 f0       	breq	.+2      	; 0x245c <__vector_6+0x5c>
    245a:	7e c0       	rjmp	.+252    	; 0x2558 <__vector_6+0x158>
		LCD_clearScreen();
    245c:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_clearScreen>
		LCD_displayString("door closing");
    2460:	8c ef       	ldi	r24, 0xFC	; 252
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <LCD_displayString>
    2468:	80 e0       	ldi	r24, 0x00	; 0
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	a6 e9       	ldi	r26, 0x96	; 150
    246e:	b3 e4       	ldi	r27, 0x43	; 67
    2470:	8b 87       	std	Y+11, r24	; 0x0b
    2472:	9c 87       	std	Y+12, r25	; 0x0c
    2474:	ad 87       	std	Y+13, r26	; 0x0d
    2476:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2478:	6b 85       	ldd	r22, Y+11	; 0x0b
    247a:	7c 85       	ldd	r23, Y+12	; 0x0c
    247c:	8d 85       	ldd	r24, Y+13	; 0x0d
    247e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	4a e7       	ldi	r20, 0x7A	; 122
    2486:	53 e4       	ldi	r21, 0x43	; 67
    2488:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    248c:	dc 01       	movw	r26, r24
    248e:	cb 01       	movw	r24, r22
    2490:	8f 83       	std	Y+7, r24	; 0x07
    2492:	98 87       	std	Y+8, r25	; 0x08
    2494:	a9 87       	std	Y+9, r26	; 0x09
    2496:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2498:	6f 81       	ldd	r22, Y+7	; 0x07
    249a:	78 85       	ldd	r23, Y+8	; 0x08
    249c:	89 85       	ldd	r24, Y+9	; 0x09
    249e:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	40 e8       	ldi	r20, 0x80	; 128
    24a6:	5f e3       	ldi	r21, 0x3F	; 63
    24a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24ac:	88 23       	and	r24, r24
    24ae:	2c f4       	brge	.+10     	; 0x24ba <__vector_6+0xba>
		__ticks = 1;
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	9e 83       	std	Y+6, r25	; 0x06
    24b6:	8d 83       	std	Y+5, r24	; 0x05
    24b8:	3f c0       	rjmp	.+126    	; 0x2538 <__vector_6+0x138>
	else if (__tmp > 65535)
    24ba:	6f 81       	ldd	r22, Y+7	; 0x07
    24bc:	78 85       	ldd	r23, Y+8	; 0x08
    24be:	89 85       	ldd	r24, Y+9	; 0x09
    24c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24c2:	20 e0       	ldi	r18, 0x00	; 0
    24c4:	3f ef       	ldi	r19, 0xFF	; 255
    24c6:	4f e7       	ldi	r20, 0x7F	; 127
    24c8:	57 e4       	ldi	r21, 0x47	; 71
    24ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24ce:	18 16       	cp	r1, r24
    24d0:	4c f5       	brge	.+82     	; 0x2524 <__vector_6+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    24d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    24d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    24d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	40 e2       	ldi	r20, 0x20	; 32
    24e0:	51 e4       	ldi	r21, 0x41	; 65
    24e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e6:	dc 01       	movw	r26, r24
    24e8:	cb 01       	movw	r24, r22
    24ea:	bc 01       	movw	r22, r24
    24ec:	cd 01       	movw	r24, r26
    24ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f2:	dc 01       	movw	r26, r24
    24f4:	cb 01       	movw	r24, r22
    24f6:	9e 83       	std	Y+6, r25	; 0x06
    24f8:	8d 83       	std	Y+5, r24	; 0x05
    24fa:	0f c0       	rjmp	.+30     	; 0x251a <__vector_6+0x11a>
    24fc:	89 e1       	ldi	r24, 0x19	; 25
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	9c 83       	std	Y+4, r25	; 0x04
    2502:	8b 83       	std	Y+3, r24	; 0x03
    2504:	8b 81       	ldd	r24, Y+3	; 0x03
    2506:	9c 81       	ldd	r25, Y+4	; 0x04
    2508:	01 97       	sbiw	r24, 0x01	; 1
    250a:	f1 f7       	brne	.-4      	; 0x2508 <__vector_6+0x108>
    250c:	9c 83       	std	Y+4, r25	; 0x04
    250e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2510:	8d 81       	ldd	r24, Y+5	; 0x05
    2512:	9e 81       	ldd	r25, Y+6	; 0x06
    2514:	01 97       	sbiw	r24, 0x01	; 1
    2516:	9e 83       	std	Y+6, r25	; 0x06
    2518:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    251a:	8d 81       	ldd	r24, Y+5	; 0x05
    251c:	9e 81       	ldd	r25, Y+6	; 0x06
    251e:	00 97       	sbiw	r24, 0x00	; 0
    2520:	69 f7       	brne	.-38     	; 0x24fc <__vector_6+0xfc>
    2522:	14 c0       	rjmp	.+40     	; 0x254c <__vector_6+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2524:	6f 81       	ldd	r22, Y+7	; 0x07
    2526:	78 85       	ldd	r23, Y+8	; 0x08
    2528:	89 85       	ldd	r24, Y+9	; 0x09
    252a:	9a 85       	ldd	r25, Y+10	; 0x0a
    252c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	9e 83       	std	Y+6, r25	; 0x06
    2536:	8d 83       	std	Y+5, r24	; 0x05
    2538:	8d 81       	ldd	r24, Y+5	; 0x05
    253a:	9e 81       	ldd	r25, Y+6	; 0x06
    253c:	9a 83       	std	Y+2, r25	; 0x02
    253e:	89 83       	std	Y+1, r24	; 0x01
    2540:	89 81       	ldd	r24, Y+1	; 0x01
    2542:	9a 81       	ldd	r25, Y+2	; 0x02
    2544:	01 97       	sbiw	r24, 0x01	; 1
    2546:	f1 f7       	brne	.-4      	; 0x2544 <__vector_6+0x144>
    2548:	9a 83       	std	Y+2, r25	; 0x02
    254a:	89 83       	std	Y+1, r24	; 0x01
		 _delay_ms(300);
		 LCD_clearScreen();
    254c:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_clearScreen>
		timer1_deinit_CTC_mode();
    2550:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <timer1_deinit_CTC_mode>
      flag=0;
    2554:	10 92 12 01 	sts	0x0112, r1
	}

}
    2558:	2e 96       	adiw	r28, 0x0e	; 14
    255a:	de bf       	out	0x3e, r29	; 62
    255c:	cd bf       	out	0x3d, r28	; 61
    255e:	cf 91       	pop	r28
    2560:	df 91       	pop	r29
    2562:	ff 91       	pop	r31
    2564:	ef 91       	pop	r30
    2566:	bf 91       	pop	r27
    2568:	af 91       	pop	r26
    256a:	9f 91       	pop	r25
    256c:	8f 91       	pop	r24
    256e:	7f 91       	pop	r23
    2570:	6f 91       	pop	r22
    2572:	5f 91       	pop	r21
    2574:	4f 91       	pop	r20
    2576:	3f 91       	pop	r19
    2578:	2f 91       	pop	r18
    257a:	0f 90       	pop	r0
    257c:	0f be       	out	0x3f, r0	; 63
    257e:	0f 90       	pop	r0
    2580:	1f 90       	pop	r1
    2582:	18 95       	reti

00002584 <timer1_init_CTC_mode>:

void timer1_init_CTC_mode(void)
{
    2584:	df 93       	push	r29
    2586:	cf 93       	push	r28
    2588:	cd b7       	in	r28, 0x3d	; 61
    258a:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0; //timer initial value
    258c:	ec e4       	ldi	r30, 0x4C	; 76
    258e:	f0 e0       	ldi	r31, 0x00	; 0
    2590:	11 82       	std	Z+1, r1	; 0x01
    2592:	10 82       	st	Z, r1
	OCR1A  = 900; //compare value
    2594:	ea e4       	ldi	r30, 0x4A	; 74
    2596:	f0 e0       	ldi	r31, 0x00	; 0
    2598:	84 e8       	ldi	r24, 0x84	; 132
    259a:	93 e0       	ldi	r25, 0x03	; 3
    259c:	91 83       	std	Z+1, r25	; 0x01
    259e:	80 83       	st	Z, r24
	TIMSK |= (1<<OCIE1A); //enable compare interrupt for channel A
    25a0:	a9 e5       	ldi	r26, 0x59	; 89
    25a2:	b0 e0       	ldi	r27, 0x00	; 0
    25a4:	e9 e5       	ldi	r30, 0x59	; 89
    25a6:	f0 e0       	ldi	r31, 0x00	; 0
    25a8:	80 81       	ld	r24, Z
    25aa:	80 61       	ori	r24, 0x10	; 16
    25ac:	8c 93       	st	X, r24
	/* Configure timer1 control registers
	 * 1. Non PWM mode FOC1A=1 and FOC1B=1
	 * 2. No need for OC1A & OC1B in this example so COM1A0=0 & COM1A1=0 & COM1B0=0 & COM1B1=0
	 * 3. CTC Mode and compare value in OCR1A WGM10=0 & WGM11=0 & WGM12=1 & WGM13=0
	 */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    25ae:	ef e4       	ldi	r30, 0x4F	; 79
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	8c e0       	ldi	r24, 0x0C	; 12
    25b4:	80 83       	st	Z, r24
	/*
	 * 4. Clock = F_CPU/1024 CS10=1 CS11=0 CS12=1
	 */
	TCCR1B = (1<<WGM12) | (1<<CS10) | (1<<CS12);
    25b6:	ee e4       	ldi	r30, 0x4E	; 78
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	8d e0       	ldi	r24, 0x0D	; 13
    25bc:	80 83       	st	Z, r24
}
    25be:	cf 91       	pop	r28
    25c0:	df 91       	pop	r29
    25c2:	08 95       	ret

000025c4 <timer1_deinit_CTC_mode>:


void timer1_deinit_CTC_mode(void)
{
    25c4:	df 93       	push	r29
    25c6:	cf 93       	push	r28
    25c8:	cd b7       	in	r28, 0x3d	; 61
    25ca:	de b7       	in	r29, 0x3e	; 62

	TIMSK &= ~(1<<OCIE1A); //enable compare interrupt for channel A
    25cc:	a9 e5       	ldi	r26, 0x59	; 89
    25ce:	b0 e0       	ldi	r27, 0x00	; 0
    25d0:	e9 e5       	ldi	r30, 0x59	; 89
    25d2:	f0 e0       	ldi	r31, 0x00	; 0
    25d4:	80 81       	ld	r24, Z
    25d6:	8f 7e       	andi	r24, 0xEF	; 239
    25d8:	8c 93       	st	X, r24

}
    25da:	cf 91       	pop	r28
    25dc:	df 91       	pop	r29
    25de:	08 95       	ret

000025e0 <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(void)
{
    25e0:	df 93       	push	r29
    25e2:	cf 93       	push	r28
    25e4:	cd b7       	in	r28, 0x3d	; 61
    25e6:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    25e8:	eb e2       	ldi	r30, 0x2B	; 43
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	82 e0       	ldi	r24, 0x02	; 2
    25ee:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    25f0:	ea e2       	ldi	r30, 0x2A	; 42
    25f2:	f0 e0       	ldi	r31, 0x00	; 0
    25f4:	88 e1       	ldi	r24, 0x18	; 24
    25f6:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
    25f8:	e0 e4       	ldi	r30, 0x40	; 64
    25fa:	f0 e0       	ldi	r31, 0x00	; 0
    25fc:	86 e8       	ldi	r24, 0x86	; 134
    25fe:	80 83       	st	Z, r24

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    2600:	e0 e4       	ldi	r30, 0x40	; 64
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    2606:	e9 e2       	ldi	r30, 0x29	; 41
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	8c e0       	ldi	r24, 0x0C	; 12
    260c:	80 83       	st	Z, r24
}
    260e:	cf 91       	pop	r28
    2610:	df 91       	pop	r29
    2612:	08 95       	ret

00002614 <UART_sendByte>:

void UART_sendByte(const uint8 data)
{
    2614:	df 93       	push	r29
    2616:	cf 93       	push	r28
    2618:	0f 92       	push	r0
    261a:	cd b7       	in	r28, 0x3d	; 61
    261c:	de b7       	in	r29, 0x3e	; 62
    261e:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2620:	eb e2       	ldi	r30, 0x2B	; 43
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	80 81       	ld	r24, Z
    2626:	88 2f       	mov	r24, r24
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	80 72       	andi	r24, 0x20	; 32
    262c:	90 70       	andi	r25, 0x00	; 0
    262e:	00 97       	sbiw	r24, 0x00	; 0
    2630:	b9 f3       	breq	.-18     	; 0x2620 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now */
	UDR = data;
    2632:	ec e2       	ldi	r30, 0x2C	; 44
    2634:	f0 e0       	ldi	r31, 0x00	; 0
    2636:	89 81       	ldd	r24, Y+1	; 0x01
    2638:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    263a:	0f 90       	pop	r0
    263c:	cf 91       	pop	r28
    263e:	df 91       	pop	r29
    2640:	08 95       	ret

00002642 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    2642:	df 93       	push	r29
    2644:	cf 93       	push	r28
    2646:	cd b7       	in	r28, 0x3d	; 61
    2648:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    264a:	eb e2       	ldi	r30, 0x2B	; 43
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	80 81       	ld	r24, Z
    2650:	88 23       	and	r24, r24
    2652:	dc f7       	brge	.-10     	; 0x264a <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag
	   will be cleared after read this data */
    return UDR;
    2654:	ec e2       	ldi	r30, 0x2C	; 44
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	80 81       	ld	r24, Z
}
    265a:	cf 91       	pop	r28
    265c:	df 91       	pop	r29
    265e:	08 95       	ret

00002660 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    2660:	df 93       	push	r29
    2662:	cf 93       	push	r28
    2664:	00 d0       	rcall	.+0      	; 0x2666 <UART_sendString+0x6>
    2666:	0f 92       	push	r0
    2668:	cd b7       	in	r28, 0x3d	; 61
    266a:	de b7       	in	r29, 0x3e	; 62
    266c:	9b 83       	std	Y+3, r25	; 0x03
    266e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2670:	19 82       	std	Y+1, r1	; 0x01
    2672:	0e c0       	rjmp	.+28     	; 0x2690 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2674:	89 81       	ldd	r24, Y+1	; 0x01
    2676:	28 2f       	mov	r18, r24
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	8a 81       	ldd	r24, Y+2	; 0x02
    267c:	9b 81       	ldd	r25, Y+3	; 0x03
    267e:	fc 01       	movw	r30, r24
    2680:	e2 0f       	add	r30, r18
    2682:	f3 1f       	adc	r31, r19
    2684:	80 81       	ld	r24, Z
    2686:	0e 94 0a 13 	call	0x2614	; 0x2614 <UART_sendByte>
		i++;
    268a:	89 81       	ldd	r24, Y+1	; 0x01
    268c:	8f 5f       	subi	r24, 0xFF	; 255
    268e:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2690:	89 81       	ldd	r24, Y+1	; 0x01
    2692:	28 2f       	mov	r18, r24
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	8a 81       	ldd	r24, Y+2	; 0x02
    2698:	9b 81       	ldd	r25, Y+3	; 0x03
    269a:	fc 01       	movw	r30, r24
    269c:	e2 0f       	add	r30, r18
    269e:	f3 1f       	adc	r31, r19
    26a0:	80 81       	ld	r24, Z
    26a2:	88 23       	and	r24, r24
    26a4:	39 f7       	brne	.-50     	; 0x2674 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
	UART_sendByte('#');
    26a6:	83 e2       	ldi	r24, 0x23	; 35
    26a8:	0e 94 0a 13 	call	0x2614	; 0x2614 <UART_sendByte>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    26ac:	0f 90       	pop	r0
    26ae:	0f 90       	pop	r0
    26b0:	0f 90       	pop	r0
    26b2:	cf 91       	pop	r28
    26b4:	df 91       	pop	r29
    26b6:	08 95       	ret

000026b8 <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    26b8:	0f 93       	push	r16
    26ba:	1f 93       	push	r17
    26bc:	df 93       	push	r29
    26be:	cf 93       	push	r28
    26c0:	00 d0       	rcall	.+0      	; 0x26c2 <UART_receiveString+0xa>
    26c2:	0f 92       	push	r0
    26c4:	cd b7       	in	r28, 0x3d	; 61
    26c6:	de b7       	in	r29, 0x3e	; 62
    26c8:	9b 83       	std	Y+3, r25	; 0x03
    26ca:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    26cc:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    26ce:	89 81       	ldd	r24, Y+1	; 0x01
    26d0:	28 2f       	mov	r18, r24
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	8a 81       	ldd	r24, Y+2	; 0x02
    26d6:	9b 81       	ldd	r25, Y+3	; 0x03
    26d8:	8c 01       	movw	r16, r24
    26da:	02 0f       	add	r16, r18
    26dc:	13 1f       	adc	r17, r19
    26de:	0e 94 21 13 	call	0x2642	; 0x2642 <UART_recieveByte>
    26e2:	f8 01       	movw	r30, r16
    26e4:	80 83       	st	Z, r24
    26e6:	0f c0       	rjmp	.+30     	; 0x2706 <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    26e8:	89 81       	ldd	r24, Y+1	; 0x01
    26ea:	8f 5f       	subi	r24, 0xFF	; 255
    26ec:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
    26f0:	28 2f       	mov	r18, r24
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	8a 81       	ldd	r24, Y+2	; 0x02
    26f6:	9b 81       	ldd	r25, Y+3	; 0x03
    26f8:	8c 01       	movw	r16, r24
    26fa:	02 0f       	add	r16, r18
    26fc:	13 1f       	adc	r17, r19
    26fe:	0e 94 21 13 	call	0x2642	; 0x2642 <UART_recieveByte>
    2702:	f8 01       	movw	r30, r16
    2704:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    2706:	89 81       	ldd	r24, Y+1	; 0x01
    2708:	28 2f       	mov	r18, r24
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	8a 81       	ldd	r24, Y+2	; 0x02
    270e:	9b 81       	ldd	r25, Y+3	; 0x03
    2710:	fc 01       	movw	r30, r24
    2712:	e2 0f       	add	r30, r18
    2714:	f3 1f       	adc	r31, r19
    2716:	80 81       	ld	r24, Z
    2718:	83 32       	cpi	r24, 0x23	; 35
    271a:	31 f7       	brne	.-52     	; 0x26e8 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    271c:	89 81       	ldd	r24, Y+1	; 0x01
    271e:	28 2f       	mov	r18, r24
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	8a 81       	ldd	r24, Y+2	; 0x02
    2724:	9b 81       	ldd	r25, Y+3	; 0x03
    2726:	fc 01       	movw	r30, r24
    2728:	e2 0f       	add	r30, r18
    272a:	f3 1f       	adc	r31, r19
    272c:	10 82       	st	Z, r1
}
    272e:	0f 90       	pop	r0
    2730:	0f 90       	pop	r0
    2732:	0f 90       	pop	r0
    2734:	cf 91       	pop	r28
    2736:	df 91       	pop	r29
    2738:	1f 91       	pop	r17
    273a:	0f 91       	pop	r16
    273c:	08 95       	ret

0000273e <__prologue_saves__>:
    273e:	2f 92       	push	r2
    2740:	3f 92       	push	r3
    2742:	4f 92       	push	r4
    2744:	5f 92       	push	r5
    2746:	6f 92       	push	r6
    2748:	7f 92       	push	r7
    274a:	8f 92       	push	r8
    274c:	9f 92       	push	r9
    274e:	af 92       	push	r10
    2750:	bf 92       	push	r11
    2752:	cf 92       	push	r12
    2754:	df 92       	push	r13
    2756:	ef 92       	push	r14
    2758:	ff 92       	push	r15
    275a:	0f 93       	push	r16
    275c:	1f 93       	push	r17
    275e:	cf 93       	push	r28
    2760:	df 93       	push	r29
    2762:	cd b7       	in	r28, 0x3d	; 61
    2764:	de b7       	in	r29, 0x3e	; 62
    2766:	ca 1b       	sub	r28, r26
    2768:	db 0b       	sbc	r29, r27
    276a:	0f b6       	in	r0, 0x3f	; 63
    276c:	f8 94       	cli
    276e:	de bf       	out	0x3e, r29	; 62
    2770:	0f be       	out	0x3f, r0	; 63
    2772:	cd bf       	out	0x3d, r28	; 61
    2774:	09 94       	ijmp

00002776 <__epilogue_restores__>:
    2776:	2a 88       	ldd	r2, Y+18	; 0x12
    2778:	39 88       	ldd	r3, Y+17	; 0x11
    277a:	48 88       	ldd	r4, Y+16	; 0x10
    277c:	5f 84       	ldd	r5, Y+15	; 0x0f
    277e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2780:	7d 84       	ldd	r7, Y+13	; 0x0d
    2782:	8c 84       	ldd	r8, Y+12	; 0x0c
    2784:	9b 84       	ldd	r9, Y+11	; 0x0b
    2786:	aa 84       	ldd	r10, Y+10	; 0x0a
    2788:	b9 84       	ldd	r11, Y+9	; 0x09
    278a:	c8 84       	ldd	r12, Y+8	; 0x08
    278c:	df 80       	ldd	r13, Y+7	; 0x07
    278e:	ee 80       	ldd	r14, Y+6	; 0x06
    2790:	fd 80       	ldd	r15, Y+5	; 0x05
    2792:	0c 81       	ldd	r16, Y+4	; 0x04
    2794:	1b 81       	ldd	r17, Y+3	; 0x03
    2796:	aa 81       	ldd	r26, Y+2	; 0x02
    2798:	b9 81       	ldd	r27, Y+1	; 0x01
    279a:	ce 0f       	add	r28, r30
    279c:	d1 1d       	adc	r29, r1
    279e:	0f b6       	in	r0, 0x3f	; 63
    27a0:	f8 94       	cli
    27a2:	de bf       	out	0x3e, r29	; 62
    27a4:	0f be       	out	0x3f, r0	; 63
    27a6:	cd bf       	out	0x3d, r28	; 61
    27a8:	ed 01       	movw	r28, r26
    27aa:	08 95       	ret

000027ac <itoa>:
    27ac:	fb 01       	movw	r30, r22
    27ae:	9f 01       	movw	r18, r30
    27b0:	e8 94       	clt
    27b2:	42 30       	cpi	r20, 0x02	; 2
    27b4:	c4 f0       	brlt	.+48     	; 0x27e6 <itoa+0x3a>
    27b6:	45 32       	cpi	r20, 0x25	; 37
    27b8:	b4 f4       	brge	.+44     	; 0x27e6 <itoa+0x3a>
    27ba:	4a 30       	cpi	r20, 0x0A	; 10
    27bc:	29 f4       	brne	.+10     	; 0x27c8 <itoa+0x1c>
    27be:	97 fb       	bst	r25, 7
    27c0:	1e f4       	brtc	.+6      	; 0x27c8 <itoa+0x1c>
    27c2:	90 95       	com	r25
    27c4:	81 95       	neg	r24
    27c6:	9f 4f       	sbci	r25, 0xFF	; 255
    27c8:	64 2f       	mov	r22, r20
    27ca:	77 27       	eor	r23, r23
    27cc:	0e 94 07 14 	call	0x280e	; 0x280e <__udivmodhi4>
    27d0:	80 5d       	subi	r24, 0xD0	; 208
    27d2:	8a 33       	cpi	r24, 0x3A	; 58
    27d4:	0c f0       	brlt	.+2      	; 0x27d8 <itoa+0x2c>
    27d6:	89 5d       	subi	r24, 0xD9	; 217
    27d8:	81 93       	st	Z+, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	00 97       	sbiw	r24, 0x00	; 0
    27de:	a1 f7       	brne	.-24     	; 0x27c8 <itoa+0x1c>
    27e0:	16 f4       	brtc	.+4      	; 0x27e6 <itoa+0x3a>
    27e2:	5d e2       	ldi	r21, 0x2D	; 45
    27e4:	51 93       	st	Z+, r21
    27e6:	10 82       	st	Z, r1
    27e8:	c9 01       	movw	r24, r18
    27ea:	0c 94 f7 13 	jmp	0x27ee	; 0x27ee <strrev>

000027ee <strrev>:
    27ee:	dc 01       	movw	r26, r24
    27f0:	fc 01       	movw	r30, r24
    27f2:	67 2f       	mov	r22, r23
    27f4:	71 91       	ld	r23, Z+
    27f6:	77 23       	and	r23, r23
    27f8:	e1 f7       	brne	.-8      	; 0x27f2 <strrev+0x4>
    27fa:	32 97       	sbiw	r30, 0x02	; 2
    27fc:	04 c0       	rjmp	.+8      	; 0x2806 <strrev+0x18>
    27fe:	7c 91       	ld	r23, X
    2800:	6d 93       	st	X+, r22
    2802:	70 83       	st	Z, r23
    2804:	62 91       	ld	r22, -Z
    2806:	ae 17       	cp	r26, r30
    2808:	bf 07       	cpc	r27, r31
    280a:	c8 f3       	brcs	.-14     	; 0x27fe <strrev+0x10>
    280c:	08 95       	ret

0000280e <__udivmodhi4>:
    280e:	aa 1b       	sub	r26, r26
    2810:	bb 1b       	sub	r27, r27
    2812:	51 e1       	ldi	r21, 0x11	; 17
    2814:	07 c0       	rjmp	.+14     	; 0x2824 <__udivmodhi4_ep>

00002816 <__udivmodhi4_loop>:
    2816:	aa 1f       	adc	r26, r26
    2818:	bb 1f       	adc	r27, r27
    281a:	a6 17       	cp	r26, r22
    281c:	b7 07       	cpc	r27, r23
    281e:	10 f0       	brcs	.+4      	; 0x2824 <__udivmodhi4_ep>
    2820:	a6 1b       	sub	r26, r22
    2822:	b7 0b       	sbc	r27, r23

00002824 <__udivmodhi4_ep>:
    2824:	88 1f       	adc	r24, r24
    2826:	99 1f       	adc	r25, r25
    2828:	5a 95       	dec	r21
    282a:	a9 f7       	brne	.-22     	; 0x2816 <__udivmodhi4_loop>
    282c:	80 95       	com	r24
    282e:	90 95       	com	r25
    2830:	bc 01       	movw	r22, r24
    2832:	cd 01       	movw	r24, r26
    2834:	08 95       	ret

00002836 <_exit>:
    2836:	f8 94       	cli

00002838 <__stop_program>:
    2838:	ff cf       	rjmp	.-2      	; 0x2838 <__stop_program>
